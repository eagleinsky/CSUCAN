A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     1


MACRO ASSEMBLER A166 V5.36.0.1
OBJECT MODULE PLACED IN .\obj\Start_V2.obj
ASSEMBLER INVOKED BY: C:\Keil4\C166\BIN\A166.EXE Start_V2.A66 MODV2 SEGMENTED MODV2 SET(SMALL) DEBUG PRINT(.\list\Start_
                      V2.lst) OBJECT(.\obj\Start_V2.obj) EP

LOC      OBJ             LINE     SOURCE

                            1     $MODV2                                  ; Define C166v2 core mode
                            2     ;
                            3     ;------------------------------------------------------------------------------
                            4     ;  This file is part of the C166 Compiler package
                            5     ;  Copyright KEIL ELEKTRONIK GmbH 1993 - 2008
                            6     ;  Version 5.08
                            7     ;  Note:  PHAx default set to 0 as bypass for TwinCAN device problem.
                            8     ;  *** <<< Use Configuration Wizard in Context Menu >>> ***
                            9     ;
                           10     ;------------------------------------------------------------------------------
                           11     ;  START_V2.A66:  This code is executed after processor reset and provides the
                           12     ;                 startup sequence for the C166v2/Super10 architecture CPU's.
                           13     ;                 (i.e. XC161, XC164, XC167, ect.)
                           14     ;
                           15     ;  You may add this file to a uVision2 project - in this case it will be 
                           16     ;  automatically assembled and linked.
                           17     ;
                           18     ;  For manual translation of this file use A166 with the following invocation:
                           19     ;
                           20     ;     A166 START_V2.A66 SET (model)
                           21     ;
                           22     ;     model determines the memory model and can be one of the following:
                           23     ;         TINY, SMALL, COMPACT, HCOMPACT, MEDIUM, LARGE, HLARGE, XLARGE
                           24     ;
                           25     ;  Example:  A166 START_V2.A66 SET (SMALL)
                           26     ;
                           27     ;  For manual linkage of the modified START_V2.OBJ file to your application
                           28     ;  use the following L166 invocation:
                           29     ;
                           30     ;     L166 your object file list, START_V2.OBJ controls
                           31     ;
                           32     ;------------------------------------------------------------------------------
                           33     ; Setup model-dependend Assembler controls
                           34     $CASE
                           35     $IF NOT TINY
                           36     $SEGMENTED
                           37     $ENDIF
                           38     ; Settings for ADDRSEL calculation (do not change!)
 0400                      39     KB          EQU    0x400     ; define KB constant for CS _SIZE calculation
 00100000                  40     MB          EQU    0x400*KB  ; define MB as 1024KB
                           41     ;------------------------------------------------------------------------------
                           42     ;
                           43     ; <h>Definitions for System and User Stack
                           44     ; ========================================
                           45     ;
                           46     ; <o>STKSZ: Maximum System Stack Size selection <0x0-0x1000:0x2>
                           47     ; <i> Defines the system stack space that is used by CALL/RET and PUSH/POP
                           48     ; <i> instructions.  The system stack space must be adjusted according the actual
                           49     ; <i> requirements of the application.
 0200                      50     SSTSZ   EQU     0x200 
                           51     ; <o> USTSZ: User Stack Size Definition <0x0-0x4000:0x2>
                           52     ; <i> Defines the user stack space available for automatics.  This stack space is
                           53     ; <i> accessed by R0.  The user stack space must be adjusted according the actual
                           54     ; <i> requirements of the application.
 0200                      55     USTSZ   EQU     0x200    ; set User Stack Size to 200H Bytes.
                           56     ;
                           57     ; <o> UST1SZ: User Stack Size for local register bank 1 <0x0-0x4000:0x2>
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     2

                           58     ; <i> Defines the user stack space available for the interrupt functions that are
                           59     ; <i> assigned to the local register bank 1.  Since the compiler cannot copy the R0
                           60     ; <i> value to local register banks, the user stack must be assign separately.
                           61     ; <i> If you have no interrupt functions assigned to local register bank 1, you may
                           62     ; <i> set UST1SZ to 0.
 0020                      63     UST1SZ   EQU    0x20     ; set User Stack Size to 20H Bytes.
                           64     ;
                           65     ; <o> UST2SZ: User Stack Size for local register bank 2 <0x0-0x4000:0x2>
                           66     ; <i> Defines the user stack space available for the interrupt functions that are
                           67     ; <i> assigned to the local register bank 1.  Since the compiler cannot copy the R0
                           68     ; <i> value to local register banks, the user stack must be assign separately.
                           69     ;  If you have no interrupt functions assigned to local register bank 2, you may
                           70     ;  set UST2SZ to 0.
 0020                      71     UST2SZ   EQU    0x20     ; set User Stack Size to 20H Bytes.
                           72     ;
                           73     ; </h>
                           74     ; <h>Definitions for Startup Code
                           75     ; ===============================
                           76     ;
                           77     ; <q> CLR_MEMORY: Enable/Disable Memory Zero Initialization of RAM area
                           78     ; --- <i> Set CLR_MEMORY = 0 to disable memory zero initialization
                           79     $SET (CLR_MEMORY = 1)
                           80     ;
                           81     ; <q> INIT_VARS: Enable/Disable Variable Initialization
                           82     ; --- <i> Set INIT_VARS = 0 to disable variable initialization
                           83     $SET (INIT_VARS = 1)
                           84     ;
                           85     ; <q> DPPUSE:  Allow re-assign of DPP registers 
                           86     ; --- <i> Set DPPUSE = 0 to reduce the code size of the startup code, if you
                           87     ;     <i> are not using the L166 DPPUSE directive.
                           88     $SET (DPPUSE = 1)
                           89     ;
                           90     ; <q> DPP3USE: Use DPP3 register during variable initialization
                           91     ; --- <i> Set DPP3USE = 0 to disable the usage of DPP3 during initialization of
                           92     ;     <i> variables.  This option might be required if you write
                           93     ;     <i> program parts that are reloaded during application 
                           94     ;     <i> execution and increase code size of the startup code.
                           95     $SET (DPP3USE = 1)
                           96     ;
                           97     ;</h>
                           98     ; <h> CPU Configuration
                           99     ; =====================
                          100     ;
                          101     ; <e> Definitions for CPU Configuration Register CPUCON1
                          102     ; ======================================================
                          103     ;
                          104     ;  INIT_CPUCON1: Init CPUCON1 register
                          105     ; --- <i>Set INIT_CPUCON1 = 1 to initialize the CPUCON1 register
                          106     $SET (INIT_CPUCON1 = 0) ; default: do not initialize CPUCON1
                          107     ;
                          108     ; <q> ZCJ: Enable Zero Cycle Jump Function (CPUCON1.0):
 0001                     109     _ZCJ EQU 1 ; 0 = Disable Zero Cycle Jump Function /Dave/                   
                          110                             ; 1 = Enable Zero Cycle Jump Function
                          111     ;
                          112     ; <q> BP: Enable Branch Prediction Unit (CPUCON1.1):
 0001                     113     _BP EQU 1 ; 0 = Disable Branch Prediction Unit /Dave/                   
                          114                             ; 1 = Enable Branch Prediction Unit
                          115     ;
                          116     ; <q> INTSCXT: Enable Interruptability of Switch Context Instruction (CPUCON1.2):
 0001                     117     _INTSCXT EQU 1 ; 0 = Disable Interruption of SCXT instruction /Dave/                  
                                   
                          118                             ; 1 = Enable Interruption of SCXT instruction
                          119     ;
                          120     ; SGTDIS: Disable Segmentation Control (CPUCON1.3):
                                  $IF TINY
                                  _SGTDIS EQU 0 ; disable segmented mode for TINY model /Dave/                   
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     3

                          123     $ELSE
 0000                     124     _SGTDIS  EQU    0       ; enable segmented mode (Reset Value)
                          125     $ENDIF
                          126     ;
                          127     ; <o> WDTCTL: Watchdog Timer Control (CPUCON1.4):
                          128     ; <0=> DISWDT executable until end of EINIT  <1=> DISWDT/ENWDT always executable
 0000                     129     _WDTCTL EQU 0 ; 0 = DISWDT executable until end of EINIT /Dave/                   
                          130                             ; 1 = DISWDT/ENWDT always executable
                          131     ;
                          132     ; <o> VECSC: Vector Table Scaling Factor (CPUCON1.5 .. CPUCON1.6)
                          133     ; <0=> 2 words  <1=> 4 words  <2=> 8 words  <3=> 16 words
 0000                     134     _VECSC EQU 0 ; 0 = Space between two vectors is 2 words /Dave/                   
                          135                             ; 1 = Space between two vectors is 4 words
                          136                             ; 2 = Space between two vectors is 8 words
                          137                             ; 3 = Space between two vectors is 16 words
                          138     ;
                          139     ; </e>
                          140     ;
                          141     ; <e> Definitions for CPU Configuration Register CPUCON2
                          142     ; ======================================================
                          143     ;
                          144     ;  INIT_CPUCON2: Init CPUCON2 register
                          145     ; --- <i>Set INIT_CPUCON2 = 1 to initialize the CPUCON2 register
                          146     $SET (INIT_CPUCON2 = 0) ; default: do not initialize CPUCON2  
                          147     ;
                          148     ; <q> SL: Enable Short Loop Mode (CPUCON2.0)
 0001                     149     _SL EQU 1 ; 0 = Short Loop mode disabled /Dave/                   
                          150                             ; 1 = Short Loop mode enabled
                          151     ;
                          152     ; <q> DIAD: Disable Atomic Injection Deny (CPUCON2.1)
 0001                     153     _DIAD  EQU      1       ; 0 = Injection-requests are denied during Atomic 
                          154                             ; 1 = Injection-requests are not denied during Atomic 
                          155     ;
                          156     ; <q> RETST: Enable Return Stack (CPUCON2.3)
 0001                     157     _RETST EQU 1 ; 0 = Return Stack disabled /Dave/                   
                          158                             ; 1 = Return Stack enabled
                          159     ;
                          160     ; <q> OVRUN: Pipeline Control (CPUCON2.4)
 0001                     161     _OVRUN EQU 1 ; 0 = Overrun of Pipeline Bubbles not allowed /Dave/                   
                          162                             ; 1 = Overrun of Pipeline Bubbles allowed
                          163     ;
                          164     ; <q> LFIC: Linear Follower Instruction Cache (CPUCON2.5)
 0001                     165     _LFIC     EQU   1       ; 0 = Linear Follower Instruction Cache disabled
                          166                             ; 1 = Linear Follower Instruction Cache enabled
                          167     ;
                          168     ; <q> STEN: Stall Instruction Enable (CPUCON2.6)
 0000                     169     _STEN EQU 0 ; 0 = Stall instruction disabled /Dave/                   
                          170                             ; 1 = Stall instruction enabled
                          171     ;
                          172     ; <q> EIOIAEN: Early IO Injection Acknowledge Enable (CPUCON2.7)
 0001                     173     _EIOIAEN  EQU   1       ; 0 = Injection ack. by destructive read not guaranteed
                          174     ;                       ; 1 = Injection ack. by destructive read guaranteed
                          175     ; 
                          176     ; <q> BYPF: Fetch Bypass Control (CPUCON2.8)
 0001                     177     _BYPF EQU 1 ; 0 = Bypass Path from Fetch to Decode disabled /Dave/                   
                          178                             ; 1 = Bypass Path from Fetch to Decode enabled
                          179     ;
                          180     ; <q> BYPPF: Enable Prefecth Bypass Control (CPUCON2.9)
 0001                     181     _BYPPF EQU 1 ; 0 = Bypass Path from Prefetch to Decode disabled /Dave/                
                                     
                          182                             ; 1 = Bypass Path from Prefetch to Decode enabled
                          183     ;
                          184     ; <o> FIFOFED: FIFO Fed Configuration (CPUCON2.10 .. CPUCON2.11)
                          185     ; <0=> FIFO disabled    <1=> 1 instruction
                          186     ; <2=> 2 instructions   <3=> 3 instructions
 0003                     187     _FIFOFED EQU 3 ; 0 = FIFO disabled /Dave/                   
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     4

                          188                             ; 1 = FIFO filled with up to 1 instruction per cycle
                          189                             ; 2 = FIFO filled with up to 2 instructions per cycle
                          190                             ; 3 = FIFO filled with up to 3 instructions per cycle
                          191     ;
                          192     ;<o> FIFODEPTH: FIFO Depth Configuration (CPUCON2.12 .. CPUCON2.15) <0-8>
 0008                     193     _FIFODEPTH EQU 8 ; 0 = No FIFO entries (No FIFO) /Dave/                   
                          194                             ; 1 = 1 FIFO entry
                          195                             ; ...
                          196                             ; 8 = 8 FIFO entries
                          197                             ; 9 - 15 = reserved
                          198     ;</e>
                          199     
                          200     ; <e> Definitions for Internal Memory Block Control Register IMBCTR
                          201     ; =================================================================
                          202     ;
                          203     ;  INIT_IMBCTR: Init IMBCTR register
                          204     ; --- <i>Set INIT_IMBCTR = 1 to initialize the IMBCTR register
                          205     $SET (INIT_IMBCTR = 0)  ; default: do not initialize IMBCTR  
                          206     ;
                          207     ; <o> WSFLASH: Wait States for the Flash Memory (IMBCTR.0 .. IMBCTR.1)
                          208     ; <0=> No waitstates (Flash Read in one clock)
                          209     ; <1=> One waitstate (Flash Read in two clocks)
                          210     ; <2=> Two waitstates (Flash Read in three clocks)
                          211     ; <3=> Three waitstates (Flash Read in four clocks)
 0001                     212     _WSFLASH  EQU   1       ; 0 = No waitstates
                          213                             ; 1 = One waitstate
                          214                             ; 2 = Two waitstates
                          215                             ; 3 = Three waitstates
                          216     ;
                          217     ; <q> WSRAM: Wait State for Program RAM Access (IMBCTR.2)
                          218     ; <i> when enabled, Program SRAM has same timing behaviour as Flash memory
 0000                     219     _WSRAM    EQU   0       ; 0 = Program SRAM accessed with max. speed
                          220                             ; 1 = Program SRAM access like Flash Memory
                          221     ;
                          222     ;</e>
                          223     
                          224     ;</h>
                          225     ; <e> OCDS Debug Peripheral Suspend Configuration
                          226     ; ===============================================
                          227     ; <i> Initialize OPSEN to stop specific peripherals during debugging
 0000                     228     _OCDS_PSTOP     EQU 0   ; 0 = OPSEN is not modified by startup code
                          229                             ; 1 = OPSEN is modified with the value below
                          230     ; <i> Selects the peripherals that are halted by OCDS debugging
                          231     ; <i> when a breakpoint is reached
                          232     ; <q.0> Stop Analog/Digital Converter
                          233     ; <q.1> Stop UART ASC0
                          234     ; <q.2> Stop Synchronus Serial Cnl0 SSC0
                          235     ; <q.3> Stop Timer Block GPT 
                          236     ; bit 4 reserved
                          237     ; <q.5> Stop on-chip Flash Memory Module
                          238     ; <q.6> Stop CAPCOM Unit 1
                          239     ; <q.7> Stop CAPCOM Unit 2
                          240     ; <q.8> Stop CAPCOM Unit 6
                          241     ; bit 9 reserved
                          242     ; <q.10> Stop UART ASC1
                          243     ; <q.11> Stop I2C Bus Module
                          244     ; <q.12> Stop SDLM (J1850) Module
                          245     ; <q.13> Stop on-chip CAN Module
                          246     ; <q.14> Stop Real Time Clock
                          247     ; <q.15> Stop Synchronus Serial Cnl1 SSC1
                          248     
                          249     ; value for OPSEN (OCE/OCDS Peripheral Suspend Register)
 0000                     250     _OPSEN    EQU   0
                          251     ;</e>
                          252     
                          253     ; <h> Peripheral Configuration
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     5

                          254     ; ============================
                          255     ;
                          256     ; <e> Definitions for System Configuration Register SYSCON1
                          257     ; =========================================================
                          258     ;
                          259     ; INIT_SYSCON1: Init SYSCON1 register
                          260     ; --- Set INIT_SYSCON1 = 1 to initialize the SYSCON1 register
                          261     $SET (INIT_SYSCON1 = 0) ; /Dave/                   
                          262     ;
                          263     ; <q> SLEEPCON: Sleep Mode Configuration (SYSCON1.0 .. SYSCON1.1)
                          264     ; <0=> IDLE mode upon IDLE instr. <1=> SLEEP mode upon IDLE instr.
 0000                     265     _SLEEPCON EQU 0 ; 0 = Normal IDLE mode entered upone IDLE instruction /Dave/          
                                           
                          266                             ; 1 = SLEEP mode entered upon IDLE instruction
                          267                             ; 2 - 3 = reserved
                          268     ;
                          269     ; <q> PDCFG: Port Driver Configuration (SYSCON1.2 .. SYSCON1.3)
                          270     ; <0=>Port drivers are always ON <1=>Port drivers are off in IDLE/Sleep mode
                          271     ; <2=>Port drivers are off in Powerdown mode
 0000                     272     _PDCFG EQU 0 ; 0 = Port drivers are always ON (default) /Dave/                   
                          273                             ; 1 = Port drivers are off in IDLE or Sleep mode
                          274                             ; 2 = Port drivers are off in Powerdown mode
                          275                             ; 3 = reserved
                          276     ;
                          277     ; <o> PFCFG: Program Flash Configuration (SYSCON1.4 .. SYSCON1.5) 
                          278     ; <0=> Program Flash always ON <1=>Program Flash OFF in IDLE/Sleep mode
 0000                     279     _PFCFG EQU 0 ; 0 = Program Flash is always ON (default) /Dave/                   
                          280                             ; 1 = Program Flash is off in IDLE or Sleep mode
                          281                             ; 2 - 3 = reserved
                          282     ;
                          283     ; <o> CPSYS: Clock Prescaler for System (SYSCON1.8 .. SYSCON1.10)
                          284     ; <0=>CPU clock = PLL frequency  <1=>CPU clock = PLL frequency / 2
 0000                     285     _CPSYS EQU 0 ; 0 = clock signal for CPU is PLL frequency /Dave/                   
                          286                             ; 1 = clock signal for CPU is PLL frequency / 2
                          287                             ; 2 - 7 = reserved
                          288     ; </e>
                          289     ;
                          290     ; <e> Definitions for System Configuration Register SYSCON3
                          291     ; =========================================================
                          292     ;
                          293     ; INIT_SYSCON3: Init SYSCON3 register
                          294     ; --- Set INIT_SYSCON3 = 1 to initialize the SYSCON3 register
                          295     $SET (INIT_SYSCON3 = 1) ; /Dave/                   
                          296     ;
                          297     ; SYSCON3:  Power Management (disable on-chip peripherals)
                          298     ;
                          299     ;<q> Disable Analog/Digital Converter
 0000                     300     ADCDIS  EQU     0       ; 1 = disable Analog/Digital Converter    (SYSCON3.0)
                          301     ;<q> Disable UART ASC0
 0000                     302     ASC0DIS EQU 0 ; 1 = disable UART ASC0                   (SYSCON3.1) /Dave/            
                                         
                          303     ;<q> Disable Synchronus Serial Cnl0 SSC0
 0000                     304     SSC0DIS EQU 0 ; 1 = disable Synchronus Serial Cnl0 SSC0 (SYSCON3.2) /Dave/            
                                         
                          305     ;<q> Disable Timer Block GPT 
 0000                     306     GPTDIS EQU 0 ; 1 = disable Timer Block GPT             (SYSCON3.3) /Dave/             
                                        
                          307                             ; reserved                                (SYSCON3.4)
                          308     ;<q> Disable on-chip Flash Memory Module
 0000                     309     FMDIS EQU 0 ; 1 = disable on-chip Flash Memory Module (SYSCON3.5) /Dave/              
                                       
                          310     ;<q> Disable CAPCOM Unit 1
 0001                     311     CC1DIS EQU 1 ; 1 = disable CAPCOM Unit 1               (SYSCON3.6) /Dave/             
                                        
                          312     ;<q> Disable CAPCOM Unit 2
 0000                     313     CC2DIS EQU 0 ; 1 = disable CAPCOM Unit 2               (SYSCON3.7) /Dave/             
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     6

                                        
                          314     ;<q> Disable CAPCOM Unit 6
 0001                     315     CC6DIS EQU 1 ; 1 = disable CAPCOM Unit 6               (SYSCON3.8) /Dave/             
                                        
                          316                             ; reserved                                (SYSCON3.9)
                          317     ;<q> Disable UART ASC1
 0001                     318     ASC1DIS EQU 1 ; 1 = disable UART ASC1                   (SYSCON3.10) /Dave/           
                                          
                          319     ;<q> Disable I2C Bus Module
 0000                     320     I2CDIS EQU 0 ; 1 = disable I2C Bus Module              (SYSCON3.11) /Dave/            
                                         
                          321     ;<q> Disable SDLM (J1850) Module
 0000                     322     SDLMDIS EQU 0 ; 1 = disable SDLM (J1850) Module         (SYSCON3.12) /Dave/           
                                          
                          323     ;<q> Disable on-chip CAN Module
 0000                     324     CANDIS EQU 0 ; 1 = disable on-chip CAN Module          (SYSCON3.13) /Dave/            
                                         
                          325     ;<q> Disable Real Time Clock
 0000                     326     RTCDIS  EQU     0       ; 1 = disable Real Time Clock             (SYSCON3.14)
                          327     ;<q> Disable Synchronus Serial Cnl1 SSC1
 0001                     328     SSC1DIS EQU 1 ; 1 = disable Synchronus Serial Cnl1 SSC1 (SYSCON3.15) /Dave/           
                                          
                          329     ;
                          330     ;</e>
                          331     ;</h>
                          332     ; <e> Definitions for Reset Configuration Register RSTCON
                          333     ; =======================================================
                          334     ;
                          335     ; INIT_RSTCON: Init RSTCON register
                          336     ; --- Set INIT_RSTCON = 1 to initialize the RSTCON register
                          337     $SET (INIT_RSTCON = 0) ; /Dave/                   
                          338     ;
                          339     ; <o> RSTLEN: Reset Length Control (RSTCON.0 .. RSTCON.2)
                          340     ; <0=>   2 CPU clocks  <1=>   4 CPU clocks  <2=>   8 CPU clocks  <3=>  16 CPU clocks
                          341     ; <4=>  32 CPU clocks  <5=>  64 CPU clocks  <6=> 128 CPU clocks  <7=> 256 CPU clocks
 0000                     342     _RSTLEN EQU 0 ; 0 =   2 t_CPU clocks (default) /Dave/                   
                          343                             ; 1 =   4 t_CPU clocks
                          344                             ; 2 =   8 t_CPU clocks
                          345                             ; 3 =  16 t_CPU clocks
                          346                             ; 4 =  32 t_CPU clocks
                          347                             ; 5 =  64 t_CPU clocks
                          348                             ; 6 = 128 t_CPU clocks
                          349                             ; 7 = 256 t_CPU clocks
                          350     ;
                          351     ; <o> RORMV: RSTOUT# Remove Control (RSTCON.4)
                          352     ; <0=> RSTOUT delivers RSTOUT# signal <1=> RSTOUT pin operates as GPIO
 0000                     353     _RORMV EQU 0 ; 0 = RSTOUT delivers RSTOUT# signal /Dave/                   
                          354                             ; 1 = RSTOUT pin operates as GPIO
                          355     ;
                          356     ; <o> ROCOFF: RSTOUT# Control Switch Off (RSTCON.5)
                          357     ; <0=>RSTOUT deactivated by user software  <1=>RSTOUT deactivated after reset
 0000                     358     _ROCOFF EQU 0 ; 0 = RSTOUT is deactivated by user software /Dave/                   
                          359                             ; 1 = RSTOUT is deactivated at end of reset
                          360     ;
                          361     ; <o> ROCON: RSTOUT# Control Switch Off (RSTCON.6)
                          362     ; <0=> RSTOUT active on any reset  <1=> RSTOUT active on hardware reset
 0000                     363     _ROCON EQU 0 ; 0 = RSTOUT is activated upon any reset /Dave/                   
                          364                             ; 1 = RSTOUT is only activated upon a hardware reset
                          365     ;
                          366     ; <q> RODIS: RSTOUT# Disable Control (RSTCON.7) <0-1>
 0000                     367     _RODIS EQU 0 ; 0 = RSTOUT is controlled by other mechanism /Dave/                   
                          368                             ; 1 = RSTOUT is deactivated
                          369     ;
                          370     ;</e>
                          371     ;
                          372     ;
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     7

                          373     ; <e> Definitions for PLL Control Register PLLCON
                          374     ; ===============================================
                          375     ;
                          376     ; INIT_PLLCON: Init PLLCON register
                          377     ; --- Set INIT_PLLCON = 1 to initialize the PLLCON register
                          378     $SET (INIT_PLLCON = 1) ; /Dave/                   
                          379     ;
                          380     ; <o> PLLODIV: PLL Output Divider (PLLCON.0 .. PLLCON.3) <0-14>
 0004                     381     _PLLODIV EQU 4 ; 0 .. 14  Fpll = Fvco / (PLLODIV+1) /Dave/                   
                          382                             ; 15 = reserved
                          383     ;
                          384     ; <o> PLLIDIV: PLL Input Divider (PLLCON.4 .. PLLCON.5) <0-3>
                          385     ; <i> Fin = Fosc / (PLLIDIV+1)
 0001                     386     _PLLIDIV EQU 1 ; 0 .. 3   Fin = Fosc / (PLLIDIV+1) /Dave/                   
                          387     ;
                          388     ; <o> PLLVB: PLL VCO Band Select (PLLCON.6 .. PLLCON.7)
                          389     ; <0=> Ouput:100-150MHz / Base:20-80MHz <1=> Ouput:150-200MHz / Base:40-130MHz
                          390     ; <2=> Ouput:200-250MHz / Base:60-180MHz <3=> (250...300 MHz) Reserved
 0000                     391     _PLLVB EQU 0 ; ValueVCO output frequency    Base frequency /Dave/                   
                          392                             ; 0 = 100...150 MHz            20...80 MHz
                          393                             ; 1 = 150...200 MHz            40...130 MHz
                          394                             ; 2 = 200...250 MHz [def.]     60...180 MHz
                          395                             ; 3 = (250...300 MHz) Reserved
                          396     ;
                          397     ; <o> PLLMUL: PLL Multiplication Factor (PLLCON.8 .. PLLCON.12) <6-31>
                          398     ; <i> Fvco = Fin * (PLLMUL+1)
 0018                     399     _PLLMUL EQU 24 ; 7 .. 31  Fvco = Fin * (PLLMUL+1) /Dave/                   
                          400                             ; 0 .. 6 = reserved
                          401     ;
                          402     ; <o> PLLCTRL: PLL Operation Control (PLLCON.13 .. PLLCON.14)
                          403     ; <0=> Bypass PLL clock mult., the VCO is off   <1=> Bypass PLL clock mult., the VCO i
                                  s running
                          404     ; <2=> VCO clock used, input clock switched off <3=> VCO clock used, input clock conne
                                  cted
 0003                     405     _PLLCTRL EQU 3 ; 0 = Bypass PLL clock mult., the VCO is off /Dave/                   
                          406                             ; 1 = Bypass PLL clock mult., the VCO is running
                          407                             ; 2 = VCO clock used, input clock switched off
                          408                             ; 3 = VCO clock used, input clock connected
                          409     ;
                          410     ; <o> PLLWRI: PLLCON Write Ignore Flag (PLLCON.15)
                          411     ; <0=> Register PLLCON may be written  <1=> Write cycles to register PLLCON are ignore
                                  d
 0000                     412     _PLLWRI   EQU    0      ; 0 = Register PLLCON may be written
                          413                             ; 1 = Write cycles to register PLLCON are ignored
                          414     ;</e>
                          415     ;
                          416     ; <e> Definitions for Watchdog Timer Control Register WDTCON
                          417     ; ==========================================================
                          418     ;
                          419     ; --- Set WATCHDOG = 0 to enable the Hardware watchdog and initialize the WDTCON regis
                                  ter
                          420     $SET (WATCHDOG = 0) ; 0 = Disabled Hardware watchdog /Dave/                   
                          421     ;
                          422     ; <o> WDTIN: Watchdog Timer Input Frequency Select (WDTCON.0 .. WDTCON.1)
                          423     ; <0=> Peripheral Frequency divided by 2  <1=> Peripheral Frequency divided by 128 
                          424     ; <2=> Peripheral Frequency divided by 4  <3=> Peripheral Frequency divided by 256
 0000                     425     _WDTIN EQU 0 ; 0 = frequency f_peripheral / 2   (CPU default)   /Dave/                
                                     
                          426                             ; 1 = frequency f_peripheral / 128 (recommended for START_V2)
                          427                             ; 2 = frequency f_peripheral / 4
                          428                             ; 3 = frequency f_peripheral / 256
                          429     ;
                          430     ; <o> WDTREL: Watchdog Timer Reload Value (WDTCON8 .. WDTCON15) <0-255>
                          431     ; <i> High byte of WDT (counts up, overflow gives Watchdog reset)
 0000                     432     _WDTREL EQU 0 ; /Dave/                   
                          433     ;
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     8

                          434     ;</e>
                          435     ; <e> Definitions for Frequency Output Signal FOCON
                          436     ; =================================================
                          437     ;
                          438     ; INIT_FOCON: Init FOCON register
                          439     ; --- Set INIT_FOCON = 1 to initialize the FOCON register
                          440     $SET (INIT_FOCON = 0) ; /Dave/                   
                          441     ;
                          442     ; <o> CLKEN: CLKOUT Enable (FOCON.7)
                          443     ; <0=> P3.15 is IO <1=> P3.15 is CLKOUT
 0000                     444     _CLKEN EQU 0 ; 0 = P3.15 is IO pin when _FOUT is 0 /Dave/                   
                          445                             ; 1 = P3.15 outputs signal CLKOUT
                          446     ;
                          447     ; <o> FORV: Frequency Output Reload Value (FOCON.8 .. FOCON.13) <0-63>
                          448     ; <i> Is copied to FOCNT upon each underflow of FOCNT
 0000                     449     _FORV EQU 0 ; /Dave/                   
                          450     ;
                          451     ; <o> FOSS: Frequency Output Signal Select (FOCON.14)
                          452     ; <0=> Output of Toggle Latch  <1=> Output of Reload Counter
 0000                     453     _FOSS EQU 0 ; 0 = Output of the toggle latch; 0.5 duty cycle /Dave/                   
                          454                             ; 1 = Output of reload counter; duty cycle depends on FORV
                          455     ;
                          456     ; <o> FOEN: Frequency Output Enable (FOCON.15)
                          457     ; <0=> P3.15 is IO <1=> P3.15 outputs f_OUT
 0000                     458     _FOEN EQU 0 ; 0 = P3.15 is IO pin when _CLKEN is 0 /Dave/                   
                          459                             ; 1 = P3.15 outputs f_OUT when _CLKEN is 0
                          460     ;</e>
                          461     ;
                          462     ;<h> External Bus Configuration
                          463     ;
                          464     ; <e> Configure External Bus (EBC) Behaviour
                          465     ; ==========================================
                          466     ;
                          467     ; --- Set CONFIG_EBC = 0 to initialize the EBCMOD0/EBCMOD1 registers
                          468     $SET (CONFIG_EBC = 1) ; 0 = EBCMOD0/EBCMOD1 are set during reset according the  /Dave/
                                                     
                          469                             ;     of configuration bus (typical Port0) values.
                          470                             ; 1 = the following external bus configuration values
                          471                             ;      are written to EBCMOD and BUSACT0
                          472     ;
                          473     ; <h> Definitions for EBC Mode 0 register EBCMOD0
                          474     ; ===============================================
                          475     ;
                          476     ; <o> SAPEN: Segment Address Pins Enabled (EBCMOD0.0 .. EBCMOD0.3) <0-8>
                          477     ; <i> Number of active Address Lines (A16-A23)
 0004                     478     _SAPEN EQU 4 ; 0 = No segment address pins enabled /Dave/                   
                          479                             ; 1 = One (A16) segment address pin enabled
                          480                             ; : = :        
                          481                             ; 8 = Eight (A16 .. A23) address pins enabled
                          482                             ; 9 - 15 = reserved
                          483     ;
                          484     ; <o> CSPEN: CSx Pins Enabled (EBCMOD0.4 .. EBCMOD0.7) <0-8>
                          485     ; <i> Number of active ChipSelect pins
 0000                     486     _CSPEN EQU 0 ; 0 = No CS pins enabled /Dave/                   
                          487                             ; 1 = One CS (CS0) pin enabled
                          488                             ; : = :
                          489                             ; 8 = Eight CS (CS0 .. CS7) pins enabled
                          490                             ; 9 - 15 = reserved
                          491     ; Note: the number of available CS pins depends on the chip used
                          492     ;
                          493     ; <q> ARBEN: Enable Bus Arbitration Pins (EBCMOD0.8)
 0000                     494     _ARBEN EQU 0 ; 0 = HOLD, HLDA and BREQ pins are tristate or act as GPIO /Dave/        
                                             
                          495                             ; 1 = HOLD, HLDA and BREQ pins act normally
                          496     ;
                          497     ; <o> SLAVE: SLAVE mode enable (EBCMOD0.9)
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE     9

                          498     ; <0=> Master Mode  <1=> Slave Mode
 0000                     499     _SLAVE EQU 0 ; 0 = Bus arbiter acts in master mode /Dave/                   
                          500                             ; 1 = Bus arbiter acts in slave mode
                          501     ;
                          502     ; <q> EBCDIS: Disable EBC pins (EBCMOD0.10)
 0000                     503     _EBCDIS EQU 0 ; 0 = EBC is using the pins for external bus /Dave/                   
                          504                             ; 1 = EBC off (pins to be used as GPIO if implemented)
                          505     ;
                          506     ; <o> WRCFG: Configuration for pins WR/WRL and BHE/WRH (EBCMOD0.11)
                          507     ; <0=> WR and BHE  <1=> WRL and WRH
 0000                     508     _WRCFG EQU 0 ; 0 = Pins act as WR and BHE /Dave/                   
                          509                             ; 1 = Pins act as WRL and WRH
                          510     ;
                          511     ; <q> BYTDIS: Disable BHE pin (EBCMOD0.12)
 0001                     512     _BYTDIS EQU 1 ; 0 = BHE enabled /Dave/                   
                          513                             ; 1 = BHE disabled (GPIO function if implemented)
                          514     ;
                          515     ; <q> ALEDIS: Disable ALE pin (EBCMOD0.13)
 0001                     516     _ALEDIS EQU 1 ; 0 = ALE pin enabled /Dave/                   
                          517                             ; 1 = ALE pin disabled (GPIO function if implemented)
                          518     ;
                          519     ; <q> RDYDIS: Disable READY pin (EBCMOD0.14)
 0001                     520     _RDYDIS EQU 1 ; 0 = READY enabled /Dave/                   
                          521                             ; 1 = READY disabled (GPIO function if implemented)
                          522     ;
                          523     ; <o> RDYPOL: READY pin polarity (EBCMOD0.15)
                          524     ; <0=> Active Low  <1=> Active High
 0000                     525     _RDYPOL EQU 0 ; 0 = READY pin is active low /Dave/                   
                          526                             ; 1 = READY pin is active high
                          527     ;
                          528     ;</h>
                          529     ;
                          530     ; <h>Definitions for EBC Mode 1 register EBCMOD1
                          531     ; ==============================================
                          532     ;
                          533     ; <o> APDIS: Address Port Pins Disable (EBCMOD1.0 .. EBCMOD1.3) <0-15>
 0000                     534     _APDIS EQU 0 ; 0  = Address bus pins 15-1 of PORT1 enabled /Dave/                   
                          535                             ; 1  = Pin A15 disabled, A14-1 enabled
                          536                             ; 2  = Pin A15-A14 disabled, A13-1 enabled
                          537                             ; ...
                          538                             ; 15 = Pins A15-A1 disabled
                          539     ;
                          540     ; <q> A0PDIS: Address Bit 0 Pin Disable (EBCMOD1.4)
 0000                     541     _A0PDIS    EQU    0     ; 0 = Address bus pin 0 of PORT1 enabled
                          542                             ; 1 = Address bus pin 0 of PORT1 disabled
                          543     ;
                          544     ; <q> ALPDIS: Address Low Pins Disable (EBCMOD1.5)
 0000                     545     _ALPDIS EQU 0 ; 0 = Address bus pin 7-0 generally enabled /Dave/                   
                          546                             ; 1 = Address bus pin 7-0 of PORT1 disabled
                          547     ;
                          548     ; <q> DHPDIS: Data High Port Pins Disable (EBCMOD1.6)
 0001                     549     _DHPDIS EQU 1 ; 0 = Data bus pins 15-8 of PORT0 enabled /Dave/                   
                          550                             ; 1 = Data bus pins 15-8 disabled (used as GPIO)
                          551     ;
                          552     ; <q> WRPDIS: WR/WRL Pin Disable (EBCMOD1.7)
 0000                     553     _WRPDIS EQU 0 ; 0 = WR/WRL pin of Port P20 enabled /Dave/                   
                          554                             ; 1 = WR/WRL pin of Port P20 disabled
                          555     ;
                          556     ;</h></e>
                          557     ;
                          558     ; <e> Configure External Bus Behaviour for CS0 area
                          559     ; =================================================
                          560     ;
                          561     ; --- Set CONFIG_CS0 = 1 to initialize the FCONCS0/TCONCS0 registers
                          562     $SET (CONFIG_CS0 = 1) ; /Dave/                   
                          563     ;
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    10

                          564     ; <h>Definitions for Function Configuration Register FCONCS0
                          565     ; ==========================================================
                          566     ;
                          567     ; <q> ENCS0: Enable Chip Select (FCONCS0.0)
 0001                     568     _ENCS0 EQU 1 ; 0 = Chip Select 0 disabled /Dave/                   
                          569                             ; 1 = Chip Select 0 enabled
                          570     ;
                          571     ; <q> RDYEN0: Ready Enable (FCONCS0.1)
 0000                     572     _RDYEN0 EQU 0 ; 0 = Access time controlled by TCONCS0.PHE0 /Dave/                   
                          573                             ; 1 = Access time cont. by TCONCS0.PHE0 and READY signal
                          574     ;
                          575     ; <o> RDYMOD0: Ready Mode (FCONCS0.2) 
                          576     ; <0=> Asynchronous  <1=> Synchronous
 0000                     577     _RDYMOD0 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                          578                             ; 1 = Synchronous READY
                          579     ;
                          580     ; <o> BTYP0: Bus Type Selection (FCONCS0.4 .. FCONCS0.5)
                          581     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          582     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0000                     583     _BTYP0 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                          584                             ; 1 = 8 bit Multiplexed bus
                          585                             ; 2 = 16 bit Demultiplexed bus
                          586                             ; 3 = 16 bit Multiplexed bus
                          587     ; </h>
                          588     ;
                          589     ; <h> TCONCS0: Definitions for the Timing Configuration register 
                          590     ; ==============================================================
                          591     ;
                          592     ; <o> PHA0: Phase A clock cycles (TCONCS0.0 .. TCONCS0.1) <0-3>
 0003                     593     _PHA0 EQU 3 ; 0 = 0 clock cycles /Dave/                   
                          594                             ; : = : 
                          595                             ; 3 = 3 clock cycles
                          596     ;
                          597     ; <o> PHB0: Phase B clock cycles (TCONCS0.2) <1-2> <#-1>
 0001                     598     _PHB0 EQU 1 ; 0 = 1 clock cycle /Dave/                   
                          599                             ; 1 = 2 clock cycles
                          600     ;
                          601     ; <o> PHC0: Phase C clock cycles (TCONCS0.3 .. TCONCS0.4) <0-3>
 0001                     602     _PHC0 EQU 1 ; 0 = 0 clock cycles /Dave/                   
                          603                             ; : = :
                          604                             ; 3 = 3 clock cycles
                          605     ;
                          606     ; <o> PHD0: Phase D clock cycle (TCONCS0.5) <0-1>
 0001                     607     _PHD0 EQU 1 ; 0 = 0 clock cycles /Dave/                   
                          608                             ; 1 = 1 clock cycle
                          609     ;
                          610     ; <o> PHE0: Phase E clock cycles (TCONCS0.6 .. TCONCS0.10) <1-32> <#-1>
 000E                     611     _PHE0 EQU 14 ; 0 = 1 clock cycle /Dave/                   
                          612                             ; : = :
                          613                             ; 31 = 32 clock cycles
                          614     ;
                          615     ; <o> RDPHF0: Phase F read clock cycles (TCONCS0.11 .. TCONCS0.12) <0-3>
 0001                     616     _RDPHF0 EQU 1 ; 0 = 0 clock cycles /Dave/                   
                          617                             ; : = :
                          618                             ; 3 = 3 clock cycles
                          619     ;
                          620     ; <o> WRPHF0: Phase F write clock cycles (TCONCS0.13 .. TCONCS0.14) <0-3>
 0003                     621     _WRPHF0 EQU 3 ; 0 = 0 clock cycles /Dave/                   
                          622                             ; : = :
                          623                             ; 3 = 3 clock cycles
                          624     ;</h> </e>
                          625     ;
                          626     ; <e> Configure External Bus Behaviour for CS1 Area
                          627     ; =================================================
                          628     ;
                          629     ; --- Set CONFIG_CS1 = 1 to initialize the ADDRSEL1/FCONCS1/TCONCS1 registers
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    11

                          630     $SET (CONFIG_CS1 = 0) ; /Dave/                   
                          631     ;
                          632     ; <h>Definitions for Address Select register ADDRSEL1
                          633     ; ===================================================
                          634     ; <o> CS1 Start Address   <0x0-0xFFFFFF:0x1000>
 00080000                 635     _ADDR1 EQU 0x80000 ; Set CS1# Start Address (default 100000H) /Dave/                  
                                   
                          636     
                          637     ; <o> CS1 Size in KB      
                          638     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB   
                          639     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          640     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 00040000                 641     _SIZE1 EQU 256*KB ; Set CS1# Size (default 1024*KB = 1*MB) /Dave/                   
                          642                                  ; possible values for _SIZE1 are:
                          643                                  ;    4*KB            (gives RGSZ1 = 0)
                          644                                  ;    8*KB            (gives RGSZ1 = 1)
                          645                                  ;   16*KB            (gives RGSZ1 = 2)
                          646                                  ;   32*KB            (gives RGSZ1 = 3)
                          647                                  ;   64*KB            (gives RGSZ1 = 4)
                          648                                  ;  128*KB            (gives RGSZ1 = 5)
                          649                                  ;  256*KB            (gives RGSZ1 = 6)
                          650                                  ;  512*KB            (gives RGSZ1 = 7)
                          651                                  ; 1024*KB  or  1*MB  (gives RGSZ1 = 8)
                          652                                  ; 2048*KB  or  2*MB  (gives RGSZ1 = 9)
                          653                                  ; 4096*KB  or  4*MB  (gives RGSZ1 = 10)
                          654                                  ; 8192*KB  or  8*MB  (gives RGSZ1 = 11)
                          655                                  ;                    (RGSZ1 = 12 .. 15 reserved)
                          656     ;</h>
                          657     ;
                          658     ; <h>Definitions for Function Configuration Register FCONCS1
                          659     ; ==========================================================
                          660     ;
                          661     ; <q> ENCS1: Enable Chip Select (FCONCS1.0)
 0000                     662     _ENCS1 EQU 0 ; 0 = Chip Select 0 disabled /Dave/                   
                          663                             ; 1 = Chip Select 0 enabled
                          664     ;
                          665     ; <q> RDYEN1: Ready Enable (FCONCS1.1)
 0000                     666     _RDYEN1 EQU 0 ; 0 = Access time controlled by TCONCS1.PHE1 /Dave/                   
                          667                             ; 1 = Access time cont. by TCONCS1.PHE1 and READY signal
                          668     ;
                          669     ; <o> RDYMOD1: Ready Mode (FCONCS1.2)
                          670     ; <0=> Asynchronous  <1=> Synchronous
 0000                     671     _RDYMOD1 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                          672                             ; 1 = Synchronous READY
                          673     ;
                          674     ; <o> BTYP1: Bus Type Selection (FCONCS1.4 .. FCONCS1.5)
                          675     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          676     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0000                     677     _BTYP1 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                          678                             ; 1 = 8 bit Multiplexed bus
                          679                             ; 2 = 16 bit Demultiplexed bus
                          680                             ; 3 = 16 bit Multiplexed bus
                          681     ;</h>
                          682     ;
                          683     ; <h>TCONCS1: Definitions for the Timing Configuration register
                          684     ; =============================================================
                          685     ;
                          686     ; <o>PHA1: Phase A clock cycles (TCONCS1.0 .. TCONCS1.1) <0-3>
 0000                     687     _PHA1 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          688                             ; : = : 
                          689                             ; 3 = 3 clock cycles
                          690     ;
                          691     ; <o>PHB1: Phase B clock cycles (TCONCS1.2) <1-2> <#-1>
 0000                     692     _PHB1 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          693                             ; 1 = 2 clock cycles
                          694     ;
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    12

                          695     ; <o>PHC1: Phase C clock cycles (TCONCS1.3 .. TCONCS1.4) <0-3>
 0000                     696     _PHC1 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          697                             ; : = :
                          698                             ; 3 = 3 clock cycles
                          699     ;
                          700     ; <o>PHD1: Phase D clock cycles (TCONCS1.5) <0-1>
 0000                     701     _PHD1 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          702                             ; 1 = 1 clock cycle
                          703     ;
                          704     ; <o> PHE1: Phase E clock cycles (TCONCS1.6 .. TCONCS1.10) <1-32> <#-1>
 0000                     705     _PHE1 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          706                             ; : = :
                          707                             ; 31 = 32 clock cycles
                          708     ;
                          709     ; <o>RDPHF1: Phase F read clock cycles (TCONCS1.11 .. TCONCS1.12) <0-3>
 0000                     710     _RDPHF1 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          711                             ; : = :
                          712                             ; 3 = 3 clock cycles
                          713     ;
                          714     ; <o>WRPHF1: Phase F write clock cycles (TCONCS1.13 .. TCONCS1.14) <0-3>
 0000                     715     _WRPHF1 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          716                             ; : = :
                          717                             ; 3 = 3 clock cycles
                          718     ;</h> </e>
                          719     ;
                          720     ;<e>Configure External Bus Behaviour for CS2 Area
                          721     ;   =============================================
                          722     ;
                          723     ; --- Set CONFIG_CS2 = 1 to initialize the ADDRSEL2/FCONCS2/TCONCS2 registers
                          724     $SET (CONFIG_CS2 = 0) ; /Dave/                   
                          725     ;
                          726     ; <h>Definitions for Address Select register ADDRSEL2
                          727     ; ===================================================
                          728     ; <o> CS2 Start Address   <0x0-0xFFFFFF:0x1000>
 0000                     729     _ADDR2 EQU 0x0 ; Set CS2# Start Address (default 100000H) /Dave/                   
                          730     
                          731     ; <o> CS2 Size in KB      
                          732     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                          733     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          734     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 1000                     735     _SIZE2 EQU 4*KB ; Set CS2# Size (default 1024*KB = 1*MB) /Dave/                   
                          736                                  ; possible values for _SIZE2 are:
                          737                                  ;    4*KB            (gives RGSZ2 = 0)
                          738                                  ;    8*KB            (gives RGSZ2 = 1)
                          739                                  ;   16*KB            (gives RGSZ2 = 2)
                          740                                  ;   32*KB            (gives RGSZ2 = 3)
                          741                                  ;   64*KB            (gives RGSZ2 = 4)
                          742                                  ;  128*KB            (gives RGSZ2 = 5)
                          743                                  ;  256*KB            (gives RGSZ2 = 6)
                          744                                  ;  512*KB            (gives RGSZ2 = 7)
                          745                                  ; 1024*KB  or  1*MB  (gives RGSZ2 = 8)
                          746                                  ; 2048*KB  or  2*MB  (gives RGSZ2 = 9)
                          747                                  ; 4096*KB  or  4*MB  (gives RGSZ2 = 10)
                          748                                  ; 8192*KB  or  8*MB  (gives RGSZ2 = 11)
                          749                                  ;                    (RGSZ2 = 12 .. 15 reserved)
                          750     ;</h>
                          751     ;
                          752     ; <h>Definitions for Function Configuration Register FCONCS2
                          753     ; ==========================================================
                          754     ;
                          755     ; <q> ENCS2: Enable Chip Select (FCONCS2.0)
 0000                     756     _ENCS2 EQU 0 ; 0 = Chip Select 0 disabled /Dave/                   
                          757                             ; 1 = Chip Select 0 enabled
                          758     ;
                          759     ; <q> RDYEN2: Ready Enable (FCONCS2.1)
 0000                     760     _RDYEN2 EQU 0 ; 0 = Access time controlled by TCONCS2.PHE1 /Dave/                   
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    13

                          761                             ; 1 = Access time cont. by TCONCS2.PHE1 and READY signal
                          762     ;
                          763     ; <o> RDYMOD2: Ready Mode (FCONCS2.2)
                          764     ; <0=> Asynchronous  <1=> Synchronous
 0000                     765     _RDYMOD2 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                          766                             ; 1 = Synchronous READY
                          767     ;
                          768     ; <o> BTYP2: Bus Type Selection (FCONCS2.4 .. FCONCS2.5)
                          769     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          770     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0000                     771     _BTYP2 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                          772                             ; 1 = 8 bit Multiplexed bus
                          773                             ; 2 = 16 bit Demultiplexed bus
                          774                             ; 3 = 16 bit Multiplexed bus
                          775     ;</h>
                          776     ;
                          777     ; <h>TCONCS2: Definitions for the Timing Configuration register
                          778     ; =============================================================
                          779     ;
                          780     ; <o>PHA2: Phase A clock cycle (TCONCS2.0 .. TCONCS2.1) <0-3>
 0000                     781     _PHA2 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          782                             ; : = : 
                          783                             ; 3 = 3 clock cycles
                          784     ;
                          785     ; <o>PHB2: Phase B clock cycle (TCONCS2.2) <1-2> <#-1>
 0000                     786     _PHB2 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          787                             ; 1 = 2 clock cycles
                          788     ;
                          789     ; <o>PHC2: Phase C clock cycle (TCONCS2.3 .. TCONCS2.4) <0-3>
 0000                     790     _PHC2 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          791                             ; : = :
                          792                             ; 3 = 3 clock cycles
                          793     ;
                          794     ; <o>PHD2: Phase D clock cycle (TCONCS2.5) <0-1>
 0000                     795     _PHD2 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          796                             ; 1 = 1 clock cycle
                          797     ;
                          798     ; <o> PHE2: Phase E clock cycle (TCONCS2.6 .. TCONCS2.10) <1-32> <#-1>
 0000                     799     _PHE2 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          800                             ; : = :
                          801                             ; 31 = 32 clock cycles
                          802     ;
                          803     ; <o>RDPHF2: Phase F read clock cycle (TCONCS2.11 .. TCONCS2.12) <0-3>
 0000                     804     _RDPHF2 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          805                             ; : = :
                          806                             ; 3 = 3 clock cycles
                          807     ;
                          808     ; <o>WRPHF2: Phase F write clock cycle (TCONCS2.13 .. TCONCS2.14) <0-3>
 0000                     809     _WRPHF2 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          810                             ; : = :
                          811                             ; 3 = 3 clock cycles
                          812     ;</h> </e>
                          813     ;
                          814     ;<e>Configure External Bus Behaviour for CS3 Area
                          815     ;   =============================================
                          816     ;
                          817     ; --- Set CONFIG_CS3 = 1 to initialize the ADDRSEL3/FCONCS3/TCONCS3 registers
                          818     $SET (CONFIG_CS3 = 0) ; /Dave/                   
                          819     ;
                          820     ; <h>Definitions for Address Select register ADDRSEL3
                          821     ; ===================================================
                          822     ; <o> CS3 Start Address   <0x0-0xFFFFFF:0x1000>
 0000                     823     _ADDR3 EQU 0x0 ; Set CS3# Start Address (default 100000H) /Dave/                   
                          824     
                          825     ; <o> CS2 Size in KB      
                          826     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    14

                          827     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          828     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 1000                     829     _SIZE3 EQU 4*KB ; Set CS3# Size (default 1024*KB = 1*MB) /Dave/                   
                          830                                  ; possible values for _SIZE3 are:
                          831                                  ;    4*KB            (gives RGSZ3 = 0)
                          832                                  ;    8*KB            (gives RGSZ3 = 1)
                          833                                  ;   16*KB            (gives RGSZ3 = 2)
                          834                                  ;   32*KB            (gives RGSZ3 = 3)
                          835                                  ;   64*KB            (gives RGSZ3 = 4)
                          836                                  ;  128*KB            (gives RGSZ3 = 5)
                          837                                  ;  256*KB            (gives RGSZ3 = 6)
                          838                                  ;  512*KB            (gives RGSZ3 = 7)
                          839                                  ; 1024*KB  or  1*MB  (gives RGSZ3 = 8)
                          840                                  ; 2048*KB  or  2*MB  (gives RGSZ3 = 9)
                          841                                  ; 4096*KB  or  4*MB  (gives RGSZ3 = 10)
                          842                                  ; 8192*KB  or  8*MB  (gives RGSZ3 = 11)
                          843                                  ;                    (RGSZ3 = 12 .. 15 reserved)
                          844     ;</h>
                          845     ;
                          846     ; <h>Definitions for Function Configuration Register FCONCS3
                          847     ; ==========================================================
                          848     ;
                          849     ; <q> ENCS3: Enable Chip Select (FCONCS3.0)
 0000                     850     _ENCS3 EQU 0 ; 0 = Chip Select 0 disabled /Dave/                   
                          851                             ; 1 = Chip Select 0 enabled
                          852     ;
                          853     ; <q> RDYEN3: Ready Enable (FCONCS3.1)
 0000                     854     _RDYEN3 EQU 0 ; 0 = Access time controlled by TCONCS3.PHE1 /Dave/                   
                          855                             ; 1 = Access time cont. by TCONCS3.PHE1 and READY signal
                          856     ;
                          857     ; <o> RDYMOD3: Ready Mode (FCONCS3.2)
                          858     ; <0=> Asynchronous  <1=> Synchronous
 0000                     859     _RDYMOD3 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                          860                             ; 1 = Synchronous READY
                          861     ;
                          862     ; <o> BTYP3  Bus Type Selection (FCONCS3.4 .. FCONCS3.5)
                          863     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          864     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0000                     865     _BTYP3 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                          866                             ; 1 = 8 bit Multiplexed bus
                          867                             ; 2 = 16 bit Demultiplexed bus
                          868                             ; 3 = 16 bit Multiplexed bus
                          869     ;</h>
                          870     ;
                          871     ; <h>TCONCS3: Definitions for the Timing Configuration register
                          872     ; =============================================================
                          873     ;
                          874     ; <o>PHA3: Phase A clock cycle (TCONCS3.0 .. TCONCS3.1) <0-3>
 0000                     875     _PHA3 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          876                             ; : = : 
                          877                             ; 3 = 3 clock cycles
                          878     ;
                          879     ; <o>PHB3: Phase B clock cycle (TCONCS2.2) <1-2> <#-1>
 0000                     880     _PHB3 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          881                             ; 1 = 2 clock cycles
                          882     ;
                          883     ; <o>PHC3: Phase C clock cycle (TCONCS3.3 .. TCONCS3.4) <0-3>
 0000                     884     _PHC3 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          885                             ; : = :
                          886                             ; 3 = 3 clock cycles
                          887     ;
                          888     ; <o>PHD3: Phase D clock cycle (TCONCS3.5) <0-1>
 0000                     889     _PHD3 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          890                             ; 1 = 1 clock cycle
                          891     ;
                          892     ; <o> PHE3: Phase E clock cycle (TCONCS3.6 .. TCONCS3.10) <1-32> <#-1>
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    15

 0000                     893     _PHE3 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          894                             ; : = :
                          895                             ; 31 = 32 clock cycles
                          896     ;
                          897     ; <o>RDPHF3: Phase F read clock cycle (TCONCS3.11 .. TCONCS3.12) <0-3>
 0000                     898     _RDPHF3 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          899                             ; : = :
                          900                             ; 3 = 3 clock cycles
                          901     ;
                          902     ; <o>WRPHF3: Phase F write clock cycle (TCONCS3.13 .. TCONCS3.14) <0-3>
 0000                     903     _WRPHF3 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          904                             ; : = :
                          905                             ; 3 = 3 clock cycles
                          906     ;</h> </e>
                          907     ;
                          908     ;<e>Configure External Bus Behaviour for CS4 Area
                          909     ;   =============================================
                          910     ;
                          911     ; --- Set CONFIG_CS4 = 1 to initialize the ADDRSEL4/FCONCS4/TCONCS4 registers
                          912     $SET (CONFIG_CS4 = 0) ; /Dave/                   
                          913     ;
                          914     ; <h>Definitions for Address Select register ADDRSEL4
                          915     ; ===================================================
                          916     ; <o> CS4 Start Address   <0x0-0xFFFFFF:0x1000>
 0000                     917     _ADDR4 EQU 0x0 ; Set CS4# Start Address (default 100000H) /Dave/                   
                          918     
                          919     ; <o> CS4 Size in KB      
                          920     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                          921     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          922     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 1000                     923     _SIZE4 EQU 4*KB ; Set CS4# Size (default 1024*KB = 1*MB) /Dave/                   
                          924                                  ; possible values for _SIZE4 are:
                          925                                  ;    4*KB            (gives RGSZ4 = 0)
                          926                                  ;    8*KB            (gives RGSZ4 = 1)
                          927                                  ;   16*KB            (gives RGSZ4 = 2)
                          928                                  ;   32*KB            (gives RGSZ4 = 3)
                          929                                  ;   64*KB            (gives RGSZ4 = 4)
                          930                                  ;  128*KB            (gives RGSZ4 = 5)
                          931                                  ;  256*KB            (gives RGSZ4 = 6)
                          932                                  ;  512*KB            (gives RGSZ4 = 7)
                          933                                  ; 1024*KB  or  1*MB  (gives RGSZ4 = 8)
                          934                                  ; 2048*KB  or  2*MB  (gives RGSZ4 = 9)
                          935                                  ; 4096*KB  or  4*MB  (gives RGSZ4 = 10)
                          936                                  ; 8192*KB  or  8*MB  (gives RGSZ4 = 11)
                          937                                  ;                    (RGSZ4 = 12 .. 15 reserved)
                          938     ;</h>
                          939     ;
                          940     ; <h>Definitions for Function Configuration Register FCONCS4
                          941     ; ==========================================================
                          942     ;
                          943     ; <q> ENCS4: Enable Chip Select (FCONCS4.0)
 0000                     944     _ENCS4 EQU 0 ; 0 = Chip Select 0 disabled /Dave/                   
                          945                             ; 1 = Chip Select 0 enabled
                          946     ;
                          947     ; <q> RDYEN4: Ready Enable (FCONCS4.1)
 0000                     948     _RDYEN4 EQU 0 ; 0 = Access time controlled by TCONCS4.PHE1 /Dave/                   
                          949                             ; 1 = Access time cont. by TCONCS4.PHE1 and READY signal
                          950     ;
                          951     ; <o> RDYMOD4: Ready Mode (FCONCS4.2)
                          952     ; <0=> Asynchronous  <1=> Synchronous
 0000                     953     _RDYMOD4 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                          954                             ; 1 = Synchronous READY
                          955     ;
                          956     ; <o> BTYP4: Bus Type Selection (FCONCS4.4 .. FCONCS4.5)
                          957     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          958     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    16

 0000                     959     _BTYP4 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                          960                             ; 1 = 8 bit Multiplexed bus
                          961                             ; 2 = 16 bit Demultiplexed bus
                          962                             ; 3 = 16 bit Multiplexed bus
                          963     ;</h>
                          964     ;
                          965     ; <h>TCONCS4: Definitions for the Timing Configuration register
                          966     ; =============================================================
                          967     ;
                          968     ; <o>PHA4: Phase A clock cycle (TCONCS4.0 .. TCONCS4.1) <0-3>
 0000                     969     _PHA4 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          970                             ; : = : 
                          971                             ; 3 = 3 clock cycles
                          972     ;
                          973     ; <o>PHB4: Phase B clock cycle (TCONCS4.2) <1-2> <#-1>
 0000                     974     _PHB4 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          975                             ; 1 = 2 clock cycles
                          976     ;
                          977     ; <o>PHC4: Phase C clock cycle (TCONCS4.3 .. TCONCS4.4) <0-3>
 0000                     978     _PHC4 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          979                             ; : = :
                          980                             ; 3 = 3 clock cycles
                          981     ;
                          982     ; <o>PHD4: Phase D clock cycle (TCONCS4.5) <0-1>
 0000                     983     _PHD4 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          984                             ; 1 = 1 clock cycle
                          985     ;
                          986     ; <o> PHE4: Phase E clock cycle (TCONCS4.6 .. TCONCS4.10) <1-32> <#-1>
 0000                     987     _PHE4 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                          988                             ; : = :
                          989                             ; 31 = 32 clock cycles
                          990     ;
                          991     ; <o>RDPHF4: Phase F read clock cycle (TCONCS4.11 .. TCONCS4.12) <0-3>
 0000                     992     _RDPHF4 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          993                             ; : = :
                          994                             ; 3 = 3 clock cycles
                          995     ;
                          996     ; <o>WRPHF4: Phase F write clock cycle (TCONCS4.13 .. TCONCS4.14) <0-3>
 0000                     997     _WRPHF4 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                          998                             ; : = :
                          999                             ; 3 = 3 clock cycles
                         1000     ;</h> </e>
                         1001     ;
                         1002     ;<e>Configure External Bus Behaviour for CS5 Area
                         1003     ;   =============================================
                         1004     ;
                         1005     ; --- Set CONFIG_CS5 = 1 to initialize the ADDRSEL5/FCONCS5/TCONCS5 registers
                         1006     $SET (CONFIG_CS5 = 0) ; /Dave/                   
                         1007     ;
                         1008     ; <h>Definitions for Address Select register ADDRSEL5
                         1009     ; ===================================================
                         1010     ; <o> CS5 Start Address   <0x0-0xFFFFFF:0x1000>
 0000                    1011     _ADDR5 EQU 0x0 ; Set CS5# Start Address (default 100000H) /Dave/                   
                         1012     
                         1013     ; <o> CS5 Size in KB      
                         1014     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                         1015     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                         1016     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 1000                    1017     _SIZE5 EQU 4*KB ; Set CS5# Size (default 1024*KB = 1*MB) /Dave/                   
                         1018                                  ; possible values for _SIZE5 are:
                         1019                                  ;    4*KB            (gives RGSZ5 = 0)
                         1020                                  ;    8*KB            (gives RGSZ5 = 1)
                         1021                                  ;   16*KB            (gives RGSZ5 = 2)
                         1022                                  ;   32*KB            (gives RGSZ5 = 3)
                         1023                                  ;   64*KB            (gives RGSZ5 = 4)
                         1024                                  ;  128*KB            (gives RGSZ5 = 5)
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    17

                         1025                                  ;  256*KB            (gives RGSZ5 = 6)
                         1026                                  ;  512*KB            (gives RGSZ5 = 7)
                         1027                                  ; 1024*KB  or  1*MB  (gives RGSZ5 = 8)
                         1028                                  ; 2048*KB  or  2*MB  (gives RGSZ5 = 9)
                         1029                                  ; 4096*KB  or  4*MB  (gives RGSZ5 = 10)
                         1030                                  ; 8192*KB  or  8*MB  (gives RGSZ5 = 11)
                         1031                                  ;                    (RGSZ5 = 12 .. 15 reserved)
                         1032     ;</h>
                         1033     ;
                         1034     ; <h>Definitions for Function Configuration Register FCONCS5
                         1035     ; ==========================================================
                         1036     ;
                         1037     ; <q> ENCS5: Enable Chip Select (FCONCS5.0)
 0000                    1038     _ENCS5 EQU 0 ; 0 = Chip Select 0 disabled /Dave/                   
                         1039                             ; 1 = Chip Select 0 enabled
                         1040     ;
                         1041     ; <q> RDYEN5: Ready Enable (FCONCS5.1)
 0000                    1042     _RDYEN5 EQU 0 ; 0 = Access time controlled by TCONCS2.PHE1 /Dave/                   
                         1043                             ; 1 = Access time cont. by TCONCS2.PHE1 and READY signal
                         1044     ;
                         1045     ; <o> RDYMOD2: Ready Mode (FCONCS5.2)
                         1046     ; <0=> Asynchronous  <1=> Synchronous
 0000                    1047     _RDYMOD5 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                         1048                             ; 1 = Synchronous READY
                         1049     ;
                         1050     ; <o> BTYP2: Bus Type Selection (FCONCS5.4 .. FCONCS5.5)
                         1051     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                         1052     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0000                    1053     _BTYP5 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                         1054                             ; 1 = 8 bit Multiplexed bus
                         1055                             ; 2 = 16 bit Demultiplexed bus
                         1056                             ; 3 = 16 bit Multiplexed bus
                         1057     ;</h>
                         1058     ;
                         1059     ; <h>TCONCS5: Definitions for the Timing Configuration register
                         1060     ; =============================================================
                         1061     ;
                         1062     ; <o>PHA5: Phase A clock cycle (TCONCS5.0 .. TCONCS5.1) <0-3>
 0000                    1063     _PHA5 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1064                             ; : = : 
                         1065                             ; 3 = 3 clock cycles
                         1066     ;
                         1067     ; <o>PHB5: Phase B clock cycle (TCONCS5.2) <1-2> <#-1>
 0000                    1068     _PHB5 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                         1069                             ; 1 = 2 clock cycles
                         1070     ;
                         1071     ; <o>PHC5: Phase C clock cycle (TCONCS5.3 .. TCONCS5.4) <0-3>
 0000                    1072     _PHC5 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1073                             ; : = :
                         1074                             ; 3 = 3 clock cycles
                         1075     ;
                         1076     ; <o>PHD5: Phase D clock cycle (TCONCS5.5) <0-1>
 0000                    1077     _PHD5 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1078                             ; 1 = 1 clock cycle
                         1079     ;
                         1080     ; <o> PHE5: Phase E clock cycle (TCONCS5.6 .. TCONCS5.10) <1-32> <#-1>
 0000                    1081     _PHE5 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                         1082                             ; : = :
                         1083                             ; 31 = 32 clock cycles
                         1084     ;
                         1085     ; <o>RDPHF5: Phase F read clock cycle (TCONCS5.11 .. TCONCS5.12) <0-3>
 0000                    1086     _RDPHF5 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1087                             ; : = :
                         1088                             ; 3 = 3 clock cycles
                         1089     ;
                         1090     ; <o>WRPHF5: Phase F write clock cycle (TCONCS5.13 .. TCONCS5.14) <0-3>
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    18

 0000                    1091     _WRPHF5 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1092                             ; : = :
                         1093                             ; 3 = 3 clock cycles
                         1094     ;</h> </e>
                         1095     ;
                         1096     ;<e>Configure External Bus Behaviour for CS6 Area
                         1097     ;   =============================================
                         1098     ;
                         1099     ; --- Set CONFIG_CS6 = 1 to initialize the ADDRSEL6/FCONCS6/TCONCS6 registers
                         1100     $SET (CONFIG_CS6 = 0) ; /Dave/                   
                         1101     ;
                         1102     ; <h>Definitions for Address Select register ADDRSEL6
                         1103     ; ===================================================
                         1104     ; <o> CS6 Start Address   <0x0-0xFFFFFF:0x1000>
 0000                    1105     _ADDR6 EQU 0x0 ; Set CS2# Start Address (default 100000H) /Dave/                   
                         1106     
                         1107     ; <o> CS6 Size in KB      
                         1108     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                         1109     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                         1110     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 1000                    1111     _SIZE6 EQU 4*KB ; Set CS6# Size (default 1024*KB = 1*MB) /Dave/                   
                         1112                                  ; possible values for _SIZE6 are:
                         1113                                  ;    4*KB            (gives RGSZ6 = 0)
                         1114                                  ;    8*KB            (gives RGSZ6 = 1)
                         1115                                  ;   16*KB            (gives RGSZ6 = 2)
                         1116                                  ;   32*KB            (gives RGSZ6 = 3)
                         1117                                  ;   64*KB            (gives RGSZ6 = 4)
                         1118                                  ;  128*KB            (gives RGSZ6 = 5)
                         1119                                  ;  256*KB            (gives RGSZ6 = 6)
                         1120                                  ;  512*KB            (gives RGSZ6 = 7)
                         1121                                  ; 1024*KB  or  1*MB  (gives RGSZ6 = 8)
                         1122                                  ; 2048*KB  or  2*MB  (gives RGSZ6 = 9)
                         1123                                  ; 4096*KB  or  4*MB  (gives RGSZ6 = 10)
                         1124                                  ; 8192*KB  or  8*MB  (gives RGSZ6 = 11)
                         1125                                  ;                    (RGSZ6 = 12 .. 15 reserved)
                         1126     ;</h>
                         1127     ;
                         1128     ; <h>Definitions for Function Configuration Register FCONCS6
                         1129     ; ==========================================================
                         1130     ;
                         1131     ; <q> ENCS6: Enable Chip Select (FCONCS6.0)
 0000                    1132     _ENCS6 EQU 0 ; 0 = Chip Select 0 disabled /Dave/                   
                         1133                             ; 1 = Chip Select 0 enabled
                         1134     ;
                         1135     ; <q> RDYEN6: Ready Enable (FCONCS6.1)
 0000                    1136     _RDYEN6 EQU 0 ; 0 = Access time controlled by TCONCS6.PHE1 /Dave/                   
                         1137                             ; 1 = Access time cont. by TCONCS6.PHE1 and READY signal
                         1138     ;
                         1139     ; <o> RDYMOD6: Ready Mode (FCONCS6.2)
                         1140     ; <0=> Asynchronous  <1=> Synchronous
 0000                    1141     _RDYMOD6 EQU 0 ; 0 = Asynchronous READY /Dave/                   
                         1142                             ; 1 = Synchronous READY
                         1143     ;
                         1144     ; <o> BTYP6: Bus Type Selection (FCONCS6.4 .. FCONCS6.5)
                         1145     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                         1146     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0000                    1147     _BTYP6 EQU 0 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                         1148                             ; 1 = 8 bit Multiplexed bus
                         1149                             ; 2 = 16 bit Demultiplexed bus
                         1150                             ; 3 = 16 bit Multiplexed bus
                         1151     ;</h>
                         1152     ;
                         1153     ; <h>TCONCS6: Definitions for the Timing Configuration register
                         1154     ; =============================================================
                         1155     ;
                         1156     ; <o>PHA6: Phase A clock cycle (TCONCS6.0 .. TCONCS6.1) <0-3>
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    19

 0000                    1157     _PHA6 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1158                             ; : = : 
                         1159                             ; 3 = 3 clock cycles
                         1160     ;
                         1161     ; <o>PHB6: Phase B clock cycle (TCONCS6.2) <1-2> <#-1>
 0000                    1162     _PHB6 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                         1163                             ; 1 = 2 clock cycles
                         1164     ;
                         1165     ; <o>PHC6: Phase C clock cycle (TCONCS6.3 .. TCONCS6.4) <0-3>
 0000                    1166     _PHC6 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1167                             ; : = :
                         1168                             ; 3 = 3 clock cycles
                         1169     ;
                         1170     ; <o>PHD6: Phase D clock cycle (TCONCS6.5) <0-1>
 0000                    1171     _PHD6 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1172                             ; 1 = 1 clock cycle
                         1173     ;
                         1174     ; <o> PHE6: Phase E clock cycle (TCONCS6.6 .. TCONCS6.10) <1-32> <#-1>
 0000                    1175     _PHE6 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                         1176                             ; : = :
                         1177                             ; 31 = 32 clock cycles
                         1178     ;
                         1179     ; <o>RDPHF6: Phase F read clock cycle (TCONCS6.11 .. TCONCS6.12) <0-3>
 0000                    1180     _RDPHF6 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1181                             ; : = :
                         1182                             ; 3 = 3 clock cycles
                         1183     ;
                         1184     ; <o>WRPHF6: Phase F write clock cycle (TCONCS6.13 .. TCONCS6.14) <0-3>
 0000                    1185     _WRPHF6 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1186                             ; : = :
                         1187                             ; 3 = 3 clock cycles
                         1188     ;</h> </e>
                         1189     ;
                         1190     ;<e>Configure External Bus Behaviour for CS7 Area
                         1191     ;   =============================================
                         1192     ;
                         1193     ; --- Set CONFIG_CS7 = 1 to initialize the ADDRSEL7/FCONCS7/TCONCS7 registers
                         1194     $SET (CONFIG_CS7 = 1) ; /Dave/                   
                         1195     ;
                         1196     ; <h>Definitions for Address Select register ADDRSEL7
                         1197     ; ===================================================
                         1198     ; <o> CS7 Start Address   <0x0-0xFFFFFF:0x1000>
 00200000                1199     _ADDR7 EQU 0x200000 ; Set CS7# Start Address (default 100000H) /Dave/                 
                                    
                         1200     
                         1201     ; <o> CS7 Size in KB      
                         1202     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                         1203     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                         1204     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 1000                    1205     _SIZE7 EQU 4*KB ; Set CS7# Size (default 1024*KB = 1*MB) /Dave/                   
                         1206                                  ; possible values for _SIZE7 are:
                         1207                                  ;    4*KB            (gives RGSZ7 = 0)
                         1208                                  ;    8*KB            (gives RGSZ7 = 1)
                         1209                                  ;   16*KB            (gives RGSZ7 = 2)
                         1210                                  ;   32*KB            (gives RGSZ7 = 3)
                         1211                                  ;   64*KB            (gives RGSZ7 = 4)
                         1212                                  ;  128*KB            (gives RGSZ7 = 5)
                         1213                                  ;  256*KB            (gives RGSZ7 = 6)
                         1214                                  ;  512*KB            (gives RGSZ7 = 7)
                         1215                                  ; 1024*KB  or  1*MB  (gives RGSZ7 = 8)
                         1216                                  ; 2048*KB  or  2*MB  (gives RGSZ7 = 9)
                         1217                                  ; 4096*KB  or  4*MB  (gives RGSZ7 = 10)
                         1218                                  ; 8192*KB  or  8*MB  (gives RGSZ7 = 11)
                         1219                                  ;                    (RGSZ7 = 12 .. 15 reserved)
                         1220     ;</h>
                         1221     ;
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    20

                         1222     ; <h>Definitions for Function Configuration Register FCONCS7
                         1223     ; ==========================================================
                         1224     ;
                         1225     ; <q> ENCS7: Enable Chip Select (FCONCS7.0)
 0001                    1226     _ENCS7 EQU 1 ; 0 = Chip Select 0 disabled /Dave/                   
                         1227                             ; 1 = Chip Select 0 enabled
                         1228     ;
                         1229     ; <q> RDYEN7: Ready Enable (FCONCS7.1)
 0001                    1230     _RDYEN7 EQU 1 ; 0 = Access time controlled by TCONCS7.PHE1 /Dave/                   
                         1231                             ; 1 = Access time cont. by TCONCS7.PHE1 and READY signal
                         1232     ;
                         1233     ; <o> RDYMOD7: Ready Mode (FCONCS7.2)
                         1234     ; <0=> Asynchronous  <1=> Synchronous
 0001                    1235     _RDYMOD7 EQU 1 ; 0 = Asynchronous READY /Dave/                   
                         1236                             ; 1 = Synchronous READY
                         1237     ;
                         1238     ; <o> BTYP7: Bus Type Selection (FCONCS7.4 .. FCONCS7.5)
                         1239     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                         1240     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                    1241     _BTYP7 EQU 2 ; 0 = 8 bit Demultiplexed bus /Dave/                   
                         1242                             ; 1 = 8 bit Multiplexed bus
                         1243                             ; 2 = 16 bit Demultiplexed bus
                         1244                             ; 3 = 16 bit Multiplexed bus
                         1245     ;</h>
                         1246     ;
                         1247     ; <h>TCONCS7: Definitions for the Timing Configuration register
                         1248     ; =============================================================
                         1249     ;
                         1250     ; <o>PHA7: Phase A clock cycle (TCONCS7.0 .. TCONCS7.1) <0-3>
 0000                    1251     _PHA7 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1252                             ; : = : 
                         1253                             ; 3 = 3 clock cycles
                         1254     ;
                         1255     ; <o>PHB7: Phase B clock cycle (TCONCS7.2) <1-2> <#-1>
 0000                    1256     _PHB7 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                         1257                             ; 1 = 2 clock cycles
                         1258     ;
                         1259     ; <o>PHC7: Phase C clock cycle (TCONCS7.3 .. TCONCS7.4) <0-3>
 0000                    1260     _PHC7 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1261                             ; : = :
                         1262                             ; 3 = 3 clock cycles
                         1263     ;
                         1264     ; <o>PHD27 Phase D clock cycle (TCONCS2.5) <0-1>
 0000                    1265     _PHD7 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1266                             ; 1 = 1 clock cycle
                         1267     ;
                         1268     ; <o> PHE7: Phase E clock cycle (TCONCS7.6 .. TCONCS7.10) <1-32> <#-1>
 0000                    1269     _PHE7 EQU 0 ; 0 = 1 clock cycle /Dave/                   
                         1270                             ; : = :
                         1271                             ; 31 = 32 clock cycles
                         1272     ;
                         1273     ; <o>RDPHF7: Phase F read clock cycle (TCONCS7.11 .. TCONCS7.12) <0-3>
 0000                    1274     _RDPHF7 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1275                             ; : = :
                         1276                             ; 3 = 3 clock cycles
                         1277     ;
                         1278     ; <o>WRPHF7: Phase F write clock cycle (TCONCS7.13 .. TCONCS7.14) <0-3>
 0000                    1279     _WRPHF7 EQU 0 ; 0 = 0 clock cycles /Dave/                   
                         1280                             ; : = :
                         1281                             ; 3 = 3 clock cycles
                         1282     ;</h> </e>
                         1283     ;
                         1284     ; </h>
                         1285     ; <<< end of configuration section >>>
                         1286     
                         1287     
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    21

                                  $IF TINY
                                  $SET (DPPUSE = 0)
                         1290     $ENDIF
                         1291     
                         1292     
                         1293     $IF NOT TINY
                         1294     ASSUME  DPP3:SYSTEM
                         1295     ASSUME  DPP2:NDATA
                         1296     $ENDIF
                         1297     
                         1298     NAME    ?C_STARTUP
                         1299     PUBLIC  ?C_STARTUP
                         1300     PUBLIC  ?L?VECSC
                         1301     
 0000                    1302     ?L?VECSC        EQU     _VECSC   ; Interrupt Vector Spacing for L166
                         1303     
                                  $IF MEDIUM OR LARGE OR HLARGE OR XLARGE
                                  Model   LIT     'FAR'
                         1306     $ELSE
                         1307     Model   LIT     'NEAR'
                         1308     $ENDIF
                         1309     
                         1310     EXTRN   main:NEAR
                         1311     
                         1312     PUBLIC          ?C_USRSTKBOT
                         1313     
--------                 1314     ?C_USERSTACK    SECTION DATA PUBLIC 'NDATA'
                         1315     ?C_USRSTKBOT:
00000000                 1316                     DS      USTSZ           ; Size of User Stack
                         1317     ?C_USERSTKTOP:
--------                 1318     ?C_USERSTACK    ENDS
                         1319     
                         1320     
                         1321     IF UST1SZ > 0                           ; Define User Stack 1 area
--------                 1322     ?C_USERSTACK1   SECTION DATA PUBLIC 'NDATA'
                         1323     ?C_USRSTKBOT1:
00000000                 1324                     DS      UST1SZ          ; Size of User Stack 1
                         1325     ?C_USERSTKTOP1:
--------                 1326     ?C_USERSTACK1   ENDS
                         1327     ENDIF
                         1328     
                         1329     IF UST2SZ > 0                           ; Define User Stack 2 area
--------                 1330     ?C_USERSTACK2   SECTION DATA PUBLIC 'NDATA'
                         1331     ?C_USRSTKBOT2:
00000000                 1332                     DS      UST2SZ          ; Size of User Stack 2
                         1333     ?C_USERSTKTOP2:
--------                 1334     ?C_USERSTACK2   ENDS
                         1335     ENDIF
                         1336     
                         1337     $IF NOT TINY
                         1338     IF (UST1SZ > 0) AND (UST2SZ > 0)        ; Define User Stack 1 area
                         1339     NDATA           DGROUP  ?C_USERSTACK, ?C_USERSTACK1, ?C_USERSTACK2
                         1340     ENDIF
                         1341     IF (UST1SZ > 0) AND (UST2SZ = 0) 
                                  NDATA           DGROUP  ?C_USERSTACK, ?C_USERSTACK1
                                  ENDIF
                         1344     IF (UST1SZ = 0) AND (UST2SZ > 0) 
                                  NDATA           DGROUP  ?C_USERSTACK, ?C_USERSTACK2
                                  ENDIF
                         1347     IF (UST1SZ = 0) AND (UST2SZ = 0) 
                                  NDATA           DGROUP  ?C_USERSTACK
                                  ENDIF
                         1350     $ENDIF
                         1351     
                         1352     ?C_MAINREGISTERS        REGDEF  R0 - R15
                         1353     
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    22

--------                 1354     ?C_SYSSTACK     SECTION DATA PUBLIC 'IDATA'
                         1355     $IF NOT TINY
                         1356     SDATA           DGROUP  ?C_SYSSTACK
                         1357     $ENDIF
                         1358     _BOS:                                   ; bottom of system stack
00000000                 1359                     DS      SSTSZ           ; Size of User Stack
                         1360     _TOS:                                   ; top of system stack
--------                 1361     ?C_SYSSTACK     ENDS
                         1362     
                         1363     
                         1364     PUBLIC          ?C_SYSSTKBOT
                         1365     PUBLIC          ?C_SYSSTKTOP
                         1366     
 0000                    1367     ?C_SYSSTKBOT    EQU     _BOS
 0200                    1368     ?C_SYSSTKTOP    EQU     _TOS
                         1369     
                         1370                     SSKDEF  7               ; unlimited System stack size
                         1371     
--------                 1372     ?C_STARTUP_CODE SECTION CODE    'ICODE'
                         1373     
                         1374     
                         1375     ;------------------------------------------------------------------------------
                         1376     
                         1377     ; Special Function Register Addresses
 EE1E                    1378     ADDRSEL1 EQU    0EE1EH
 EE26                    1379     ADDRSEL2 EQU    0EE26H
 EE2E                    1380     ADDRSEL3 EQU    0EE2EH
 EE36                    1381     ADDRSEL4 EQU    0EE36H
 EE3E                    1382     ADDRSEL5 EQU    0EE3EH
 EE46                    1383     ADDRSEL6 EQU    0EE46H
 EE4E                    1384     ADDRSEL7 EQU    0EE4EH
 FE18                    1385     CPUCON1  DEFR   0FE18H
 FE1A                    1386     CPUCON2  DEFR   0FE1AH
 EE00                    1387     EBCMOD0  EQU    0EE00H
 EE02                    1388     EBCMOD1  EQU    0EE02H
 FFAA                    1389     FOCON    DEFR   0FFAAH
 EE12                    1390     FCONCS0  EQU    0EE12H
 EE1A                    1391     FCONCS1  EQU    0EE1AH
 EE22                    1392     FCONCS2  EQU    0EE22H
 EE2A                    1393     FCONCS3  EQU    0EE2AH
 EE32                    1394     FCONCS4  EQU    0EE32H
 EE3A                    1395     FCONCS5  EQU    0EE3AH
 EE42                    1396     FCONCS6  EQU    0EE42H
 EE4A                    1397     FCONCS7  EQU    0EE4AH
 F0FE                    1398     IMBCTR   DEFR   0F0FEH
 F1E0                    1399     RSTCON   EQU    0F1E0H
 FE12                    1400     SP       DEFR   0FE12H
 FF0C                    1401     SPSEG    DEFR   0FF0CH
 FE14                    1402     STKOV    DEFR   0FE14H
 FE16                    1403     STKUN    DEFR   0FE16H
 F1DC                    1404     SYSCON1  DEFR   0F1DCH
 F1D4                    1405     SYSCON3  DEFR   0F1D4H
 F1D0                    1406     PLLCON   DEFR   0F1D0H
 EE10                    1407     TCONCS0  EQU    0EE10H
 EE18                    1408     TCONCS1  EQU    0EE18H
 EE20                    1409     TCONCS2  EQU    0EE20H
 EE28                    1410     TCONCS3  EQU    0EE28H
 EE30                    1411     TCONCS4  EQU    0EE30H
 EE38                    1412     TCONCS5  EQU    0EE38H
 EE40                    1413     TCONCS6  EQU    0EE40H
 EE48                    1414     TCONCS7  EQU    0EE48H
 FFAE                    1415     WDTCON   DEFR   0FFAEH
                         1416     
                         1417     
                         1418     ; Macro for calculation of ADDRSEL values -------------
                         1419     
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    23

                         1420     CALC_ADDRSEL     MACRO   sym, adr, size
                         1421     IF     size <= (4*KB)
                         1422     sym             EQU     ((adr >> 8) AND 0xFFF0) OR 0
                         1423     ELSEIF size <= (8*KB)
                         1424     sym             EQU     ((adr >> 8) AND 0xFFE0) OR 1
                         1425     ELSEIF size <= (16*KB)
                         1426     sym             EQU     ((adr >> 8) AND 0xFFC0) OR 2
                         1427     ELSEIF size <= (32*KB)
                         1428     sym             EQU     ((adr >> 8) AND 0xFF80) OR 3
                         1429     ELSEIF size <= (64*KB)
                         1430     sym             EQU     ((adr >> 8) AND 0xFF00) OR 4
                         1431     ELSEIF size <= (128*KB)
                         1432     sym             EQU     ((adr >> 8) AND 0xFE00) OR 5
                         1433     ELSEIF size <= (256*KB)
                         1434     sym             EQU     ((adr >> 8) AND 0xFC00) OR 6
                         1435     ELSEIF size <= (512*KB)
                         1436     sym             EQU     ((adr >> 8) AND 0xF800) OR 7
                         1437     ELSEIF size <= (1*MB)
                         1438     sym             EQU     ((adr >> 8) AND 0xF000) OR 8
                         1439     ELSEIF size <= (2*MB)
                         1440     sym             EQU     ((adr >> 8) AND 0xE000) OR 9
                         1441     ELSEIF size <= (4*MB)
                         1442     sym             EQU     ((adr >> 8) AND 0xC000) OR 10
                         1443     ELSEIF size <= (8*MB)
                         1444     sym             EQU     ((adr >> 8) AND 0x8000) OR 11
                         1445     ENDIF
                         1446                     ENDM
                         1447     ; -----------------------------------------------------
                         1448     
                         1449     ?C_RESET        PROC TASK C_STARTUP INTNO RESET = 0
                         1450     ?C_STARTUP:     LABEL   NEAR
                         1451     
                         1452     $IF (WATCHDOG = 0)
00000000 A55AA5A5        1453                     DISWDT                  ; Disable watchdog timer
                                  $ELSE 
                                  _WDTCON         SET     (_WDTREL << 8) OR (_WDTIN)
                                                  MOV     WDTCON,#_WDTCON ; Set WDTCON register
                                                  SRVWDT                  ; Enable watchdog
                         1458     $ENDIF
                         1459     
                                  $IF (INIT_CPUCON1 = 1) OR TINY          ; Set CPUCON1 register
                                  _CPC1           SET     (_VECSC<<5) OR (_WDTCTL<<4) OR (_SGTDIS<<3) 
                                  _CPC1           SET     _CPC1 OR (_INTSCXT<<2) OR (_BP<<1) OR (_ZCJ)
                                                  MOV     CPUCON1,#_CPC1
                         1464     $ENDIF
                         1465     
                                  $IF (INIT_CPUCON2 = 1)                  ; Set CPUCON2 register
                                  _CPC2           SET     (_RETST<<3) OR (_DIAD<<1) OR (_SL)
                                  _CPC2           SET     _CPC2 OR (_EIOIAEN<<7) OR (_STEN<<6) OR (_LFIC<<5) OR (_OVRUN<
                                  <4)
                                  _CPC2           SET     _CPC2 OR (_BYPPF<<9) OR (_BYPF<<8) 
                                  _CPC2           SET     _CPC2 OR (_FIFODEPTH<<12) OR (_FIFOFED<<10) 
                                                  MOV     CPUCON2,#_CPC2
                         1472     $ENDIF
                         1473     
                                  $IF (INIT_IMBCTR = 1)                   ; Set IMBCTR register
                                  _IMB            EQU     (_WSFLASH) OR (_WSRAM<<2)
                                                  EXTR    #01H
                                                  MOV     IMBCTR,#_IMB
                         1478     $ENDIF
                         1479     
                                  $IF (INIT_SYSCON1 = 1)                  ; Set SYSCON1 register
                                  _SYSC1          SET     (_CPSYS<<8) OR (_PFCFG<<4) OR (_PDCFG<<2) OR (_SLEEPCON)
                                                  EXTR    #01H            ; Extended SFR access
                                                  MOV     SYSCON1,#_SYSC1         
                         1484     $ENDIF
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    24

                         1485     
                         1486     $IF (INIT_SYSCON3 = 1)                  ; Set SYSCON3 register
 0000                    1487     _SYSC3          SET     ADCDIS OR (ASC0DIS << 1)  OR (SSC0DIS << 2)  OR (GPTDIS << 3)
 0040                    1488     _SYSC3          SET     _SYSC3 OR (FMDIS   << 5)  OR (CC1DIS  << 6)  OR (CC2DIS << 7)
 0540                    1489     _SYSC3          SET     _SYSC3 OR (CC6DIS  << 8)  OR (ASC1DIS << 10) OR (I2CDIS << 11)
 0540                    1490     _SYSC3          SET     _SYSC3 OR (SDLMDIS << 12) OR (CANDIS  << 13) OR (RTCDIS << 14)
 8540                    1491     _SYSC3          SET     _SYSC3 OR (SSC1DIS << 15)
00000004 D180            1492                     EXTR    #1
00000006 E6EA4085        1493                     MOV     SYSCON3,#_SYSC3
                         1494     $ENDIF
                         1495     
                         1496     $IF (CONFIG_EBC = 1)                    ; Set EBCMOD0 register
 0004                    1497     _EBC0           SET     (_SLAVE<<9) OR (_ARBEN<<8) OR (_CSPEN<<4) OR (_SAPEN)
 1004                    1498     _EBC0           SET     _EBC0 OR (_BYTDIS<<12) OR (_WRCFG<<11)  OR (_EBCDIS<<10) 
 7004                    1499     _EBC0           SET     _EBC0 OR (_RDYPOL<<15) OR (_RDYDIS<<14) OR (_ALEDIS<<13)
0000000A E6F00470        1500                     MOV     R0,#_EBC0
0000000E F6F000EE        1501                     MOV     EBCMOD0,R0
                         1502     
                         1503                                             ; Set EBCMOD1 register
 0040                    1504     _EBC1           SET     (_DHPDIS<<6) OR (_ALPDIS<<5) OR (_A0PDIS<<4) OR (_APDIS)
 0040                    1505     _EBC1           SET     _EBC1 OR (_WRPDIS<<7)
00000012 E6F04000        1506                     MOV     R0,#_EBC1
00000016 F6F002EE        1507                     MOV     EBCMOD1,R0
                         1508     $ENDIF
                         1509     
                         1510     $IF (CONFIG_CS0)  
                         1511                                             ; Set TCONCS0 register
 002F                    1512     _TCS0           SET     (_PHD0<<5) OR (_PHC0<<3) OR (_PHB0<<2) OR (_PHA0)
 6BAF                    1513     _TCS0           SET     _TCS0 OR (_WRPHF0<<13) OR (_RDPHF0<<11) OR (_PHE0<<6)
0000001A E6F0AF6B        1514                     MOV     R0,#_TCS0
0000001E F6F010EE        1515                     MOV     TCONCS0,R0
                         1516                                             ; Set FCONCS0 register
 0001                    1517     _FCS0  SET  (_BTYP0<<4) OR (_RDYMOD0<<2) OR (_RDYEN0<<1) OR (_ENCS0)
00000022 E010            1518                     MOV     R0,#_FCS0
00000024 F6F012EE        1519                     MOV     FCONCS0,R0
                         1520     $ENDIF
                         1521     
                                  $IF (CONFIG_CS1)
                                                                          ; Set TCONCS1 register
                                  _TCS1           SET     (_PHD1<<5) OR (_PHC1<<3) OR (_PHB1<<2) OR (_PHA1)
                                  _TCS1           SET     _TCS1 OR (_WRPHF1<<13) OR (_RDPHF1<<11) OR (_PHE1<<6)
                                                  MOV     R0,#_TCS1
                                                  MOV     TCONCS1,R0
                                                                          ; Set ADDRSEL1 register
                                  CALC_ADDRSEL    _ADDRSEL1, _ADDR1, _SIZE1
                                                  MOV     R0,#_ADDRSEL1
                                                  MOV     ADDRSEL1,R0
                                                                          ; Set FCONCS1 register
                                  _FCS1  SET  (_BTYP1<<4) OR (_RDYMOD1<<2) OR (_RDYEN1<<1) OR (_ENCS1)
                                                  MOV     R0,#_FCS1
                                                  MOV     FCONCS1,R0
                                  
                         1537     $ENDIF
                         1538     
                                  $IF (CONFIG_CS2)
                                                                          ; Set TCONCS2 register
                                  _TCS2           SET     (_PHD2<<5) OR (_PHC2<<3) OR (_PHB2<<2) OR (_PHA2)
                                  _TCS2           SET     _TCS2 OR (_WRPHF2<<13) OR (_RDPHF2<<11) OR (_PHE2<<6)
                                                  MOV     R0,#_TCS2
                                                  MOV     TCONCS2,R0
                                                                          ; Set ADDRSEL2 register
                                  CALC_ADDRSEL    _ADDRSEL2, _ADDR2, _SIZE2
                                                  MOV     R0,#_ADDRSEL2
                                                  MOV     ADDRSEL2,R0
                                                                          ; Set FCONCS2 register
                                  _FCS2  SET  (_BTYP2<<4) OR (_RDYMOD2<<2) OR (_RDYEN2<<1) OR (_ENCS2)
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    25

                                                  MOV     R0,#_FCS2
                                                  MOV     FCONCS2,R0
                                  
                         1554     $ENDIF
                         1555     
                                  $IF (CONFIG_CS3)  
                                                                          ; Set TCONCS3 register
                                  _TCS3           SET     (_PHD3<<5) OR (_PHC3<<3) OR (_PHB3<<2) OR (_PHA3)
                                  _TCS3           SET     _TCS3 OR (_WRPHF3<<13) OR (_RDPHF3<<11) OR (_PHE3<<6)
                                                  MOV     R0,#_TCS3
                                                  MOV     TCONCS3,R0
                                                                          ; Set ADDRSEL3 register
                                  CALC_ADDRSEL    _ADDRSEL3, _ADDR3, _SIZE3
                                                  MOV     R0,#_ADDRSEL3
                                                  MOV     ADDRSEL3,R0
                                                                          ; Set FCONCS3 register
                                  _FCS3  SET  (_BTYP3<<4) OR (_RDYMOD3<<2) OR (_RDYEN3<<1) OR (_ENCS3)
                                                  MOV     R0,#_FCS3
                                                  MOV     FCONCS3,R0
                                  
                         1571     $ENDIF
                         1572     
                                  $IF (CONFIG_CS4)
                                                                          ; Set TCONCS4 register
                                  _TCS4           SET     (_PHD4<<5) OR (_PHC4<<3) OR (_PHB4<<2) OR (_PHA4)
                                  _TCS4           SET     _TCS4 OR (_WRPHF4<<13) OR (_RDPHF4<<11) OR (_PHE4<<6)
                                                  MOV     R0,#_TCS4
                                                  MOV     TCONCS4,R0
                                                                          ; Set ADDRSEL4 register
                                  CALC_ADDRSEL    _ADDRSEL4, _ADDR4, _SIZE4
                                                  MOV     R0,#_ADDRSEL4
                                                  MOV     ADDRSEL4,R0
                                                                          ; Set FCONCS4 register
                                  _FCS4  SET  (_BTYP4<<4) OR (_RDYMOD4<<2) OR (_RDYEN4<<1) OR (_ENCS4)
                                                  MOV     R0,#_FCS4
                                                  MOV     FCONCS4,R0
                                  
                         1588     $ENDIF
                         1589     
                                  $IF (CONFIG_CS5)
                                                                          ; Set TCONCS5 register
                                  _TCS5           SET     (_PHD5<<5) OR (_PHC5<<3) OR (_PHB5<<2) OR (_PHA5)
                                  _TCS5           SET     _TCS5 OR (_WRPHF5<<13) OR (_RDPHF5<<11) OR (_PHE5<<6)
                                                  MOV     R0,#_TCS5
                                                  MOV     TCONCS5,R0
                                                                          ; Set ADDRSEL5 register
                                  CALC_ADDRSEL    _ADDRSEL5, _ADDR5, _SIZE5
                                                  MOV     R0,#_ADDRSEL5
                                                  MOV     ADDRSEL5,R0
                                                                          ; Set FCONCS5 register
                                  _FCS5  SET  (_BTYP5<<4) OR (_RDYMOD5<<2) OR (_RDYEN5<<1) OR (_ENCS5)
                                                  MOV     R0,#_FCS5 
                                                  MOV     FCONCS5,R0
                                  
                         1605     $ENDIF
                         1606     
                                  $IF (CONFIG_CS6)
                                                                          ; Set TCONCS6 register
                                  _TCS6           SET     (_PHD6<<5) OR (_PHC6<<3) OR (_PHB6<<2) OR (_PHA6)
                                  _TCS6           SET     _TCS6 OR (_WRPHF6<<13) OR (_RDPHF6<<11) OR (_PHE6<<6)
                                                  MOV     R0,#_TCS6
                                                  MOV     TCONCS6,R0
                                                                          ; Set ADDRSEL6 register
                                  CALC_ADDRSEL    _ADDRSEL6, _ADDR6, _SIZE6
                                                  MOV     R0,#_ADDRSEL6
                                                  MOV     ADDRSEL6,R0
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    26

                                                                          ; Set FCONCS6 register
                                  _FCS6  SET  (_BTYP6<<4) OR (_RDYMOD6<<2) OR (_RDYEN6<<1) OR (_ENCS6)
                                                  MOV     R0,#_FCS6 
                                                  MOV     FCONCS6,R0
                                  
                         1622     $ENDIF
                         1623     
                         1624     $IF (CONFIG_CS7)
                         1625                                             ; Set TCONCS7 register
 0000                    1626     _TCS7           SET     (_PHD7<<5) OR (_PHC7<<3) OR (_PHB7<<2) OR (_PHA7)
 0000                    1627     _TCS7           SET     _TCS7 OR (_WRPHF7<<13) OR (_RDPHF7<<11) OR (_PHE7<<6)
00000028 E000            1628                     MOV     R0,#_TCS7
0000002A F6F048EE        1629                     MOV     TCONCS7,R0
                         1630                                             ; Set ADDRSEL7 register
                         1631     CALC_ADDRSEL    _ADDRSEL7, _ADDR7, _SIZE7
0000002E E6F00020        1657                     MOV     R0,#_ADDRSEL7
00000032 F6F04EEE        1658                     MOV     ADDRSEL7,R0
                         1659                                             ; Set FCONCS7 register
 0027                    1660     _FCS7  SET  (_BTYP7<<4) OR (_RDYMOD7<<2) OR (_RDYEN7<<1) OR (_ENCS7)
00000036 E6F02700        1661                     MOV     R0,#_FCS7 
0000003A F6F04AEE        1662                     MOV     FCONCS7,R0
                         1663     
                         1664     $ENDIF
                         1665     
                                  $IF (INIT_RSTCON = 1)                   ; Set RSTCON register
                                  _RSTCON         SET     (_ROCOFF<<5) OR (_RORMV<<4) OR (_RSTLEN)
                                  _RSTCON         SET     _RSTCON OR (_RODIS<<7) OR (_ROCON<<6)
                                                  MOV     R0,#_RSTCON
                                                  MOV     RSTCON,R0
                         1671     $ENDIF
                         1672     
                         1673     $IF (INIT_PLLCON = 1)                   ; Set PLLCON register
 0014                    1674     _PLLCON         SET     (_PLLVB<<6) OR (_PLLIDIV<<4) OR (_PLLODIV)
 7814                    1675     _PLLCON         SET     _PLLCON OR (_PLLWRI<<15) OR (_PLLCTRL<<13) OR (_PLLMUL<<8)
0000003E D180            1676                     EXTR    #01H            ; Extended SFR access
00000040 E6E81478        1677                     MOV     PLLCON,#_PLLCON
                         1678     $ENDIF
                         1679     
                                  $IF (INIT_FOCON = 1)                    ; Set FOCON register
                                  _FOCON          SET (_CLKEN<<7) OR (_FORV<<8) OR (_FOSS<<14) OR (_FOEN<<15)
                                                  MOV     FOCON,#_FOCON
                         1683     $ENDIF
                         1684     ;
00000044 E60B???? R      1685                     MOV     STKUN,#SOF (_TOS)       ; INITIALIZE STACK UNFL REGISTER
00000048 E60A???? R      1686                     MOV     STKOV,#SOF (_BOS+6*2)   ; INITIALIZE STACK OVFL REGISTER
0000004C E609???? R      1687                     MOV     SP,#SOF (_TOS)          ; INITIALIZE STACK POINTER
00000050 E686???? R      1688                     MOV     SPSEG,#SEG (_TOS)       ; INITIALIZE STACK POINTER SEGMENT
                         1689     
                         1690     $IF NOT TINY
                         1691     
                         1692                     EXTRN   ?C_PAGEDPP0 : DATA16
                         1693                     EXTRN   ?C_PAGEDPP1 : DATA16
                         1694                     EXTRN   ?C_PAGEDPP2 : DATA16
                         1695     
                         1696     $IF (DPPUSE = 1)
00000054 E600???? E      1697                     MOV     DPP0,#?C_PAGEDPP0       ; INIT DPP0 VALUE
                         1698     $ENDIF
00000058 E601???? E      1699                     MOV     DPP1,#?C_PAGEDPP1       ; DEFAULT NEAR CONST PAGE
0000005C E602???? E      1700                     MOV     DPP2,#?C_PAGEDPP2       ; DEFAULT NEAR DATA  PAGE
                         1701     
                         1702     $ENDIF
                         1703     
00000060 E608???? R      1704                     MOV     CP,#?C_MAINREGISTERS
                         1705     
                         1706     IF _OCDS_PSTOP > 0                              ; OCDS Debug Peripheral Suspend Config
                                  uration
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    27

                                                  OPSEN   DEFR   0FE58H
                                                  MOV     OPSEN,#_OPSEN           ; setup OCE/OCDS Peripheral Suspend En
                                  able
                                  ENDIF
                         1710     
00000064 B54AB5B5        1711                     EINIT
                         1712     
                         1713     
                         1714     IF UST1SZ > 0
00000068 1A880203        1715                     BFLDH   PSW,#03H,#02H           ; select local bank 1
0000006C E6F0???? R      1716                     MOV     R0,#?C_USERSTKTOP1
                         1717     ENDIF
                         1718     
                         1719     IF UST2SZ > 0
00000070 1A880303        1720                     BFLDH   PSW,#03H,#03H           ; select local bank 2
00000074 E6F0???? R      1721                     MOV     R0,#?C_USERSTKTOP2
                         1722     ENDIF
                         1723     
                         1724     IF (UST1SZ > 0) OR (UST2SZ > 0)
00000078 1A880003        1725                     BFLDH   PSW,#03H,#00H           ; select global bank
                         1726     ENDIF
                         1727     
0000007C E6F0???? R      1728                     MOV     R0,#?C_USERSTKTOP
                         1729     
                         1730     ;------------------------------------------------------------------------------
                         1731     ;
                         1732     ; The following code is necessary to set RAM variables to 0 at start-up
                         1733     ; (RESET) of the C application program.
                         1734     ;
                         1735     
                         1736     $IF (CLR_MEMORY = 1)
                         1737     
                         1738                     EXTRN   ?C_CLRMEMSECSTART : WORD
                         1739     Clr_Memory:
                                  $IF TINY
                                                  MOV     R8,#?C_CLRMEMSECSTART
                                                  JMPR    cc_Z,EndClear
                                  
                                  RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R5,#0
                                                  MOV     R2,[R8+]    ; Count
                                                  JMPR    cc_Z,EndClear
                                                  MOV     R3,R2
                                                  MOV     R4,[R8+]
                                                  JBC     R2.14,ClearNear
                                  
                                  ClearBit:       MOV     R3,R4
                                                  SHR     R3,#3
                                                  BCLR    R3.0
                                                  ADD     R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R5,#1
                                                  SHL     R5,R4
                                                  CPL     R5
                                                  AND     R5,[R3]
                                                  MOV     [R3],R5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,ClearBit
                                                  JMPR    cc_UC,RepeatClear
                                  
                                  ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    28

                                  $ENDIF
                                                  MOVB    [R4],RL5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NN,ClearNear
                                                  JMPR    cc_UC,RepeatClear
                                  
                         1779     $ELSE
00000080 E6F9???? E      1780                     MOV     R9,#SEG (?C_CLRMEMSECSTART)
00000084 E6F8???? E      1781                     MOV     R8,#SOF (?C_CLRMEMSECSTART)
00000088 F018            1782                     MOV     R1,R8           
0000008A 7019            1783                     OR      R1,R9
0000008C 2D29            1784                     JMPR    cc_Z,EndClear
                         1785     
                         1786     RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1789     $ENDIF
0000008E E005            1790                     MOV     R5,#0
00000090 DC09            1791                     EXTS    R9,#1
00000092 9828            1792                     MOV     R2,[R8+]    ; Count
00000094 2D25            1793                     JMPR    cc_Z,EndClear
00000096 F032            1794                     MOV     R3,R2
00000098 DC09            1795                     EXTS    R9,#1
0000009A 9848            1796                     MOV     R4,[R8+]
0000009C AAF21BE0        1797                     JBC     R2.14,ClearNear
000000A0 AAF20EF0        1798                     JBC     R2.15,ClearFar
                         1799     
000000A4 F034            1800     ClearBit:       MOV     R3,R4
000000A6 7C33            1801                     SHR     R3,#3
000000A8 0EF3            1802                     BCLR    R3.0
000000AA 06F300FD        1803                     ADD     R3,#0FD00H              ; START OF BIT SPACE
000000AE E015            1804                     MOV     R5,#1
000000B0 4C54            1805                     SHL     R5,R4
000000B2 9150            1806                     CPL     R5
000000B4 685B            1807                     AND     R5,[R3]
000000B6 B853            1808                     MOV     [R3],R5
000000B8 0841            1809                     ADD     R4,#1
000000BA 2821            1810                     SUB     R2,#1
000000BC 3DF3            1811                     JMPR    cc_NZ,ClearBit
000000BE 0DE7            1812                     JMPR    cc_UC,RepeatClear
                         1813     
000000C0 DC09            1814     ClearFar:       EXTS    R9,#1
000000C2 9838            1815                     MOV     R3,[R8+]
                         1816     RepClearFar:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1819     $ENDIF
000000C4 DC44            1820                     EXTP    R4,#1
000000C6 B9A3            1821                     MOVB    [R3],RL5
000000C8 0831            1822                     ADD     R3,#1
000000CA 1840            1823                     ADDC    R4,#0
000000CC 76F300C0        1824                     OR      R3,#0C000H
000000D0 2821            1825                     SUB     R2,#1
000000D2 7DF8            1826                     JMPR    cc_NN,RepClearFar
000000D4 0DDC            1827                     JMPR    cc_UC,RepeatClear
                         1828     
                         1829     ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1832     $ENDIF
000000D6 B9A4            1833                     MOVB    [R4],RL5
000000D8 0841            1834                     ADD     R4,#1
000000DA 2821            1835                     SUB     R2,#1
000000DC 7DFC            1836                     JMPR    cc_NN,ClearNear
000000DE 0DD7            1837                     JMPR    cc_UC,RepeatClear
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    29

                         1838     $ENDIF
                         1839     
                         1840     EndClear:
                         1841     
                         1842     $ENDIF
                         1843     
                         1844     ;------------------------------------------------------------------------------
                         1845     ;
                         1846     ;  The following code is necessary, if the application program contains
                         1847     ;  initialized variables at file level.
                         1848     ;
                         1849     
                         1850     $IF (INIT_VARS = 1) ; *********************************************************
                         1851     
                         1852                     EXTRN   ?C_INITSECSTART : WORD
                         1853     Init_Vars:
                                  $IF TINY ; ********************************************************************
                                                  MOV     R8,#?C_INITSECSTART
                                  RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R2,[R8+]
                                                  JMPR    cc_Z,EndInit
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  MOV     R2,[R8+]
                                  LenLoad:        MOV     R3,[R8+]
                                  CopyInitVal:    MOVB    [R3],[R8+]
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  ADD     R3,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  ADDC    R9,#0                   ; potential overflow
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  EndInit:
                                  
                         1897     $ELSE ; $IF TINY **************************************************************
000000E0 E6F9???? E      1898                     MOV     R9,#SEG (?C_INITSECSTART)
000000E4 E6F8???? E      1899                     MOV     R8,#SOF (?C_INITSECSTART)
                         1900     $IF (DPP3USE = 1) ; ***********************************************************
                         1901     RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    30

                         1904     $ENDIF
000000E8 E6030300        1905                     MOV     DPP3,#3
000000EC DC09            1906                     EXTS    R9,#1
000000EE A828            1907                     MOV     R2,[R8]
000000F0 2D3D            1908                     JMPR    cc_Z,EndInit
000000F2 0882            1909                     ADD     R8,#2
000000F4 1890            1910                     ADDC    R9,#0
000000F6 AAF22AF0        1911                     JBC     R2.15,InitBit
000000FA F042            1912                     MOV     R4,R2
000000FC 66F2FF3F        1913                     AND     R2,#3FFFH
00000100 3D05            1914                     JMPR    cc_NZ,LenLoad
00000102 E004            1915                     MOV     R4,#0
00000104 DC09            1916                     EXTS    R9,#1
00000106 A828            1917                     MOV     R2,[R8]
00000108 0882            1918                     ADD     R8,#2
0000010A 1890            1919                     ADDC    R9,#0
0000010C DC09            1920     LenLoad:        EXTS    R9,#1
0000010E A838            1921                     MOV     R3,[R8]
00000110 0882            1922                     ADD     R8,#2
00000112 1890            1923                     ADDC    R9,#0
00000114 8AF406E0        1924                     JB      R4.14,CopyInitVal
00000118 F6F306FE        1925                     MOV     DPP3,R3
0000011C DC09            1926                     EXTS    R9,#1
0000011E A838            1927                     MOV     R3,[R8]
00000120 0882            1928                     ADD     R8,#2
00000122 1890            1929                     ADDC    R9,#0
00000124 DC09            1930     CopyInitVal:    EXTS    R9,#1
00000126 A9A8            1931                     MOVB    RL5,[R8]
00000128 0881            1932                     ADD     R8,#1
0000012A 1890            1933                     ADDC    R9,#0
0000012C B9A3            1934                     MOVB    [R3],RL5
0000012E 0831            1935                     ADD     R3,#1
00000130 8AF406E0        1936                     JB      R4.14,NoDPP3Adj
00000134 8AF304E0        1937                     JB      R3.14,NoDPP3Adj
00000138 06030100        1938                     ADD     DPP3,#1
0000013C 76F300C0        1939                     OR      R3,#0C000H              ; SET DPP3 Bits 
                         1940     NoDPP3Adj:      
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1943     $ENDIF
00000140 2821            1944                     SUB     R2,#1
00000142 3DF0            1945                     JMPR    cc_NZ,CopyInitVal
00000144 9AF8D000        1946                     JNB     R8.0,RepeatInit
00000148 0881            1947                     ADD     R8,#1
0000014A 1890            1948                     ADDC    R9,#0                   ; potential overflow
0000014C 0DCD            1949                     JMPR    cc_UC,RepeatInit
                         1950     
0000014E C043            1951     InitBit:        MOVBZ   R3,RL2
00000150 5C13            1952                     SHL     R3,#1
00000152 76F300FD        1953                     OR      R3,#0FD00H              ; START OF BIT SPACE
00000156 E014            1954                     MOV     R4,#1
00000158 F1A5            1955                     MOVB    RL5,RH2
0000015A 4C45            1956                     SHL     R4,R5                   ; CALCULATE BIT MASK
0000015C 8AF20370        1957                     JB      R2.7,SetBit
00000160 9140            1958                     CPL     R4                      ; CLEAR BIT
00000162 684B            1959                     AND     R4,[R3]
00000164 0D01            1960                     JMPR    cc_UC,StoreBit
00000166 784B            1961     SetBit:         OR      R4,[R3]                 ; SET BIT
00000168 B843            1962     StoreBit:       MOV     [R3],R4
0000016A 0DBE            1963                     JMPR    cc_UC,RepeatInit
                         1964     
                                  $ELSE ; block IF (DPP3USE = 1) ************************************************
                                  RepeatInit:       
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    31

                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  JMPR    cc_Z,EndInit
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  LenLoad:        EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JB      R4.14,CopyNearVal
                                                  MOV     R6,R3
                                                  EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  CopyInitVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  EXTP    R6,#1
                                                  MOV     [R3],RL5
                                                  ADD     R3,#1
                                                  ADDC    R6,#0
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JMPR    cc_UC,CopyInitDone
                                  
                                  
                                  CopyNearVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  MOVB    [R3],RL5
                                                  ADD     R3,#1
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyNearVal
                                  CopyInitDone:   JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  ADDC    R9,#0                   ; potential overflow
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    32

                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                         2039     $ENDIF ; close block IF (DPP3USE = 1) **************************************** 
                         2040     
                         2041     EndInit:
                         2042     
                         2043     $ENDIF ; close block $IF TINY ************************************************ 
                         2044     
                         2045     $ENDIF ; close $IF (INIT_VARS = 1) ******************************************* 
                         2046     
                         2047     ;------------------------------------------------------------------------------
                         2048     
                                  $IF TINY
                                                  JMP     main
                         2051     $ELSE
0000016C FA?????? E      2052                     JMP     FAR main
                         2053     $ENDIF
                         2054     
                         2055     ?C_RESET        ENDP
--------                 2056     ?C_STARTUP_CODE ENDS
                         2057     
                         2058     $IF (INIT_VARS = 1)
                         2059     EXTERN  ?C_ENDINIT:WORD
                         2060     $ENDIF
                         2061     
                         2062     ;******************************************************************************
                         2063     ;                                                                             *
                         2064     ; STRUCTURE OF THE INITIALIZATION INFORMATION                                 *
                         2065     ; -------------------------------------------                                 *
                         2066     ; This section describes the initialization data generated by:                *
                         2067     ;   - C166 for explicit variable initializations (in ?C_INITSEC)              *
                         2068     ;   - L166 to clear memory regions (in ?C_CLRMEMSEC)                          *
                         2069     ;                                                                             *
                         2070     ; Explicit variable initilizations at C source level are stored by C166 in    *
                         2071     ; the section ?C_INITSEC.  All partial sections are combined at linker level  *
                         2072     ; to one section.  The section end value DW 0 taken from the library module   *
                         2073     ; ?C_ENDINIT.  This module is included with the ?C_ENDINIT symbol definition. *
                         2074     ;                                                                             *
                         2075     ; Structure of the ?C_INITSEC information:                                    *
                         2076     ;     ?C_INITSECSTART:   [start address label]                                *
                         2077     ;     <typ> + <length>   [WORD]                       ----+  repeated         *
                         2078     ;     <address>          [WORD or DWORD]              ----+  repeated         *
                         2079     ;     <init_data>        [BYTES according to length]  ----+  repeated         *
                         2080     ;     0x0000             [WORD]   <end of list mark>                          *
                         2081     ; Whereby:                                                                    *
                         2082     ;   <typ> :=  0x4000: WORD  near address field,                               *
                         2083     ;             0x0000: DWORD PAG/POF address field (POF part set to DPP3)      *
                         2084     ;             0x8080: set bit                                                 *
                         2085     ;             0x8000: clear bit                                               *
                         2086     ;   <init_data> :=    bytes to copy into memory specified by <address>        *
                         2087     ;   For bit initilizations (<typ> = 0x80x0) the address is encoded in the     *
                         2088     ;   <length> field and no further address information is generated.  MSB of   *
                         2089     ;   <length> is the bit pos.  LSB of <length> is the bit address.             *
                         2090     ;                                                                             *
                         2091     ;                                                                             *
                         2092     ; Sections that start with ?xx0? are set to zero in the startup code.  The    *
                         2093     ; address information about these sections are stored by L166 in the section  *
                         2094     ; ?C_CLRMEMSEC.                                                               *
                         2095     ;                                                                             *
                         2096     ; Structure of the ?C_CLRMERSEC information:                                  *
                         2097     ;     ?C_CLRMEMSECSTART: [start address label]                                *
                         2098     ;     <typ> + <length>   [WORD]                       ----+  repeated         *
                         2099     ;     <address>          [WORD or DWORD]              ----+  repeated         *
                         2100     ;     0x0000             [WORD]   <end of list mark>                          *
                         2101     ; Whereby:                                                                    *
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    33

                         2102     ;   <typ> :=  0x4000: WORD  near address field,                               *
                         2103     ;             0x8000: DWORD PAG/POF address field (POF part set to DPP3)      *
                         2104     ;             0x0000: bit area                                                *
                         2105     ;   For bit areas (<typ> = 0x0000) the address is encoded as WORD with LSB    *
                         2106     ;   as byte offset to 0xFD00 and MSB as bit number in the addressed byte.     *
                         2107     ;                                                                             *
                         2108     ;******************************************************************************
                         2109     
                         2110                     END
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    34

SYMBOL TABLE LISTING
------ ----- -------


N A M E             TYPE   VALUE             I  ATTRIBUTES

?C_CLRMEMSECSTART.  WORD   ----                 EXT 
?C_ENDINIT . . . .  WORD   ----                 EXT 
?C_INITSECSTART. .  WORD   ----                 EXT 
?C_MAINREGISTERS .  RBANK                       REGBANK
?C_PAGEDPP0. . . .  DATA16 ----                 EXT 
?C_PAGEDPP1. . . .  DATA16 ----                 EXT 
?C_PAGEDPP2. . . .  DATA16 ----                 EXT 
?C_RESET . . . . .  I-FAR  0H                R  SEC=?C_STARTUP_CODE
?C_STARTUP . . . .  NEAR   0H                R  PUB SEC=?C_STARTUP_CODE
?C_STARTUP_CODE. .  ----   ----              R  SECTION
?C_SYSSTACK. . . .  ----   ----              R  SECTION
?C_SYSSTKBOT . . .  BYTE   0H                R  PUB SEC=?C_SYSSTACK
?C_SYSSTKTOP . . .  BYTE   200H              R  PUB SEC=?C_SYSSTACK
?C_USERSTACK . . .  ----   ----              R  SECTION
?C_USERSTACK1. . .  ----   ----              R  SECTION
?C_USERSTACK2. . .  ----   ----              R  SECTION
?C_USERSTKTOP. . .  BYTE   200H              R  SEC=?C_USERSTACK
?C_USERSTKTOP1 . .  BYTE   20H               R  SEC=?C_USERSTACK1
?C_USERSTKTOP2 . .  BYTE   20H               R  SEC=?C_USERSTACK2
?C_USRSTKBOT . . .  BYTE   0H                R  PUB SEC=?C_USERSTACK
?C_USRSTKBOT1. . .  BYTE   0H                R  SEC=?C_USERSTACK1
?C_USRSTKBOT2. . .  BYTE   0H                R  SEC=?C_USERSTACK2
?L?VECSC . . . . .  DATA3  0H                A  PUB 
ADCDIS . . . . . .  DATA3  0H                A  
ADDRSEL1 . . . . .  DATA16 EE1EH             A  
ADDRSEL2 . . . . .  DATA16 EE26H             A  
ADDRSEL3 . . . . .  DATA16 EE2EH             A  
ADDRSEL4 . . . . .  DATA16 EE36H             A  
ADDRSEL5 . . . . .  DATA16 EE3EH             A  
ADDRSEL6 . . . . .  DATA16 EE46H             A  
ADDRSEL7 . . . . .  DATA16 EE4EH             A  
ASC0DIS. . . . . .  DATA3  0H                A  
ASC1DIS. . . . . .  DATA3  1H                A  
CANDIS . . . . . .  DATA3  0H                A  
CC1DIS . . . . . .  DATA3  1H                A  
CC2DIS . . . . . .  DATA3  0H                A  
CC6DIS . . . . . .  DATA3  1H                A  
CP . . . . . . . .  WORD   FE10H             A  SFR
CPUCON1. . . . . .  WORD   FE18H             A  SFR
CPUCON2. . . . . .  WORD   FE1AH             A  SFR
C_STARTUP. . . . .  ----   ----                 
ClearBit . . . . .  NEAR   A4H               R  SEC=?C_STARTUP_CODE
ClearFar . . . . .  NEAR   C0H               R  SEC=?C_STARTUP_CODE
ClearNear. . . . .  NEAR   D6H               R  SEC=?C_STARTUP_CODE
Clr_Memory . . . .  NEAR   80H               R  SEC=?C_STARTUP_CODE
CopyInitVal. . . .  NEAR   124H              R  SEC=?C_STARTUP_CODE
DPP0 . . . . . . .  WORD   FE00H             A  SFR
DPP1 . . . . . . .  WORD   FE02H             A  SFR
DPP2 . . . . . . .  WORD   FE04H             A  SFR
DPP3 . . . . . . .  WORD   FE06H             A  SFR
EBCMOD0. . . . . .  DATA16 EE00H             A  
EBCMOD1. . . . . .  DATA16 EE02H             A  
EndClear . . . . .  NEAR   E0H               R  SEC=?C_STARTUP_CODE
EndInit. . . . . .  NEAR   16CH              R  SEC=?C_STARTUP_CODE
FCONCS0. . . . . .  DATA16 EE12H             A  
FCONCS1. . . . . .  DATA16 EE1AH             A  
FCONCS2. . . . . .  DATA16 EE22H             A  
FCONCS3. . . . . .  DATA16 EE2AH             A  
FCONCS4. . . . . .  DATA16 EE32H             A  
FCONCS5. . . . . .  DATA16 EE3AH             A  
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    35

FCONCS6. . . . . .  DATA16 EE42H             A  
FCONCS7. . . . . .  DATA16 EE4AH             A  
FMDIS. . . . . . .  DATA3  0H                A  
FOCON. . . . . . .  WORD   FFAAH             A  SFR
GPTDIS . . . . . .  DATA3  0H                A  
I2CDIS . . . . . .  DATA3  0H                A  
IMBCTR . . . . . .  WORD   F0FEH             A  ESFR
InitBit. . . . . .  NEAR   14EH              R  SEC=?C_STARTUP_CODE
Init_Vars. . . . .  NEAR   E0H               R  SEC=?C_STARTUP_CODE
KB . . . . . . . .  DATA16 400H              A  
LenLoad. . . . . .  NEAR   10CH              R  SEC=?C_STARTUP_CODE
MB . . . . . . . .  DATA32 100000H           A  
Model. . . . . . .  LIT    "NEAR"               
NDATA. . . . . . .  ----   ----                 GROUP
NoDPP3Adj. . . . .  NEAR   140H              R  SEC=?C_STARTUP_CODE
PLLCON . . . . . .  WORD   F1D0H             A  ESFR
PSW. . . . . . . .  WORD   FF10H             A  SFR
RESET. . . . . . .  INTNO  0000H             A  GLB 
RSTCON . . . . . .  DATA16 F1E0H             A  
RTCDIS . . . . . .  DATA3  0H                A  
RepClearFar. . . .  NEAR   C4H               R  SEC=?C_STARTUP_CODE
RepeatClear. . . .  NEAR   8EH               R  SEC=?C_STARTUP_CODE
RepeatInit . . . .  NEAR   E8H               R  SEC=?C_STARTUP_CODE
SDATA. . . . . . .  ----   ----                 GROUP
SDLMDIS. . . . . .  DATA3  0H                A  
SP . . . . . . . .  WORD   FE12H             A  SFR
SPSEG. . . . . . .  WORD   FF0CH             A  SFR
SSC0DIS. . . . . .  DATA3  0H                A  
SSC1DIS. . . . . .  DATA3  1H                A  
SSTSZ. . . . . . .  DATA16 200H              A  
STKOV. . . . . . .  WORD   FE14H             A  SFR
STKUN. . . . . . .  WORD   FE16H             A  SFR
SYSCON1. . . . . .  WORD   F1DCH             A  ESFR
SYSCON3. . . . . .  WORD   F1D4H             A  ESFR
SetBit . . . . . .  NEAR   166H              R  SEC=?C_STARTUP_CODE
StoreBit . . . . .  NEAR   168H              R  SEC=?C_STARTUP_CODE
TCONCS0. . . . . .  DATA16 EE10H             A  
TCONCS1. . . . . .  DATA16 EE18H             A  
TCONCS2. . . . . .  DATA16 EE20H             A  
TCONCS3. . . . . .  DATA16 EE28H             A  
TCONCS4. . . . . .  DATA16 EE30H             A  
TCONCS5. . . . . .  DATA16 EE38H             A  
TCONCS6. . . . . .  DATA16 EE40H             A  
TCONCS7. . . . . .  DATA16 EE48H             A  
UST1SZ . . . . . .  DATA8  20H               A  
UST2SZ . . . . . .  DATA8  20H               A  
USTSZ. . . . . . .  DATA16 200H              A  
WDTCON . . . . . .  WORD   FFAEH             A  SFR
_A0PDIS. . . . . .  DATA3  0H                A  
_ADDR1 . . . . . .  DATA32 80000H            A  
_ADDR2 . . . . . .  DATA3  0H                A  
_ADDR3 . . . . . .  DATA3  0H                A  
_ADDR4 . . . . . .  DATA3  0H                A  
_ADDR5 . . . . . .  DATA3  0H                A  
_ADDR6 . . . . . .  DATA3  0H                A  
_ADDR7 . . . . . .  DATA32 200000H           A  
_ADDRSEL7. . . . .  DATA16 2000H             A  
_ALEDIS. . . . . .  DATA3  1H                A  
_ALPDIS. . . . . .  DATA3  0H                A  
_APDIS . . . . . .  DATA3  0H                A  
_ARBEN . . . . . .  DATA3  0H                A  
_BOS . . . . . . .  BYTE   0H                R  SEC=?C_SYSSTACK
_BP. . . . . . . .  DATA3  1H                A  
_BTYP0 . . . . . .  DATA3  0H                A  
_BTYP1 . . . . . .  DATA3  0H                A  
_BTYP2 . . . . . .  DATA3  0H                A  
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    36

_BTYP3 . . . . . .  DATA3  0H                A  
_BTYP4 . . . . . .  DATA3  0H                A  
_BTYP5 . . . . . .  DATA3  0H                A  
_BTYP6 . . . . . .  DATA3  0H                A  
_BTYP7 . . . . . .  DATA3  2H                A  
_BYPF. . . . . . .  DATA3  1H                A  
_BYPPF . . . . . .  DATA3  1H                A  
_BYTDIS. . . . . .  DATA3  1H                A  
_CLKEN . . . . . .  DATA3  0H                A  
_CPSYS . . . . . .  DATA3  0H                A  
_CSPEN . . . . . .  DATA3  0H                A  
_DHPDIS. . . . . .  DATA3  1H                A  
_DIAD. . . . . . .  DATA3  1H                A  
_EBC0. . . . . . .  DATA16 7004H             A  
_EBC1. . . . . . .  DATA8  40H               A  
_EBCDIS. . . . . .  DATA3  0H                A  
_EIOIAEN . . . . .  DATA3  1H                A  
_ENCS0 . . . . . .  DATA3  1H                A  
_ENCS1 . . . . . .  DATA3  0H                A  
_ENCS2 . . . . . .  DATA3  0H                A  
_ENCS3 . . . . . .  DATA3  0H                A  
_ENCS4 . . . . . .  DATA3  0H                A  
_ENCS5 . . . . . .  DATA3  0H                A  
_ENCS6 . . . . . .  DATA3  0H                A  
_ENCS7 . . . . . .  DATA3  1H                A  
_FCS0. . . . . . .  DATA3  1H                A  
_FCS7. . . . . . .  DATA8  27H               A  
_FIFODEPTH . . . .  DATA4  8H                A  
_FIFOFED . . . . .  DATA3  3H                A  
_FOEN. . . . . . .  DATA3  0H                A  
_FORV. . . . . . .  DATA3  0H                A  
_FOSS. . . . . . .  DATA3  0H                A  
_INTSCXT . . . . .  DATA3  1H                A  
_LFIC. . . . . . .  DATA3  1H                A  
_OCDS_PSTOP. . . .  DATA3  0H                A  
_OPSEN . . . . . .  DATA3  0H                A  
_OVRUN . . . . . .  DATA3  1H                A  
_PDCFG . . . . . .  DATA3  0H                A  
_PFCFG . . . . . .  DATA3  0H                A  
_PHA0. . . . . . .  DATA3  3H                A  
_PHA1. . . . . . .  DATA3  0H                A  
_PHA2. . . . . . .  DATA3  0H                A  
_PHA3. . . . . . .  DATA3  0H                A  
_PHA4. . . . . . .  DATA3  0H                A  
_PHA5. . . . . . .  DATA3  0H                A  
_PHA6. . . . . . .  DATA3  0H                A  
_PHA7. . . . . . .  DATA3  0H                A  
_PHB0. . . . . . .  DATA3  1H                A  
_PHB1. . . . . . .  DATA3  0H                A  
_PHB2. . . . . . .  DATA3  0H                A  
_PHB3. . . . . . .  DATA3  0H                A  
_PHB4. . . . . . .  DATA3  0H                A  
_PHB5. . . . . . .  DATA3  0H                A  
_PHB6. . . . . . .  DATA3  0H                A  
_PHB7. . . . . . .  DATA3  0H                A  
_PHC0. . . . . . .  DATA3  1H                A  
_PHC1. . . . . . .  DATA3  0H                A  
_PHC2. . . . . . .  DATA3  0H                A  
_PHC3. . . . . . .  DATA3  0H                A  
_PHC4. . . . . . .  DATA3  0H                A  
_PHC5. . . . . . .  DATA3  0H                A  
_PHC6. . . . . . .  DATA3  0H                A  
_PHC7. . . . . . .  DATA3  0H                A  
_PHD0. . . . . . .  DATA3  1H                A  
_PHD1. . . . . . .  DATA3  0H                A  
_PHD2. . . . . . .  DATA3  0H                A  
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    37

_PHD3. . . . . . .  DATA3  0H                A  
_PHD4. . . . . . .  DATA3  0H                A  
_PHD5. . . . . . .  DATA3  0H                A  
_PHD6. . . . . . .  DATA3  0H                A  
_PHD7. . . . . . .  DATA3  0H                A  
_PHE0. . . . . . .  DATA4  EH                A  
_PHE1. . . . . . .  DATA3  0H                A  
_PHE2. . . . . . .  DATA3  0H                A  
_PHE3. . . . . . .  DATA3  0H                A  
_PHE4. . . . . . .  DATA3  0H                A  
_PHE5. . . . . . .  DATA3  0H                A  
_PHE6. . . . . . .  DATA3  0H                A  
_PHE7. . . . . . .  DATA3  0H                A  
_PLLCON. . . . . .  DATA16 7814H             A  
_PLLCTRL . . . . .  DATA3  3H                A  
_PLLIDIV . . . . .  DATA3  1H                A  
_PLLMUL. . . . . .  DATA8  18H               A  
_PLLODIV . . . . .  DATA3  4H                A  
_PLLVB . . . . . .  DATA3  0H                A  
_PLLWRI. . . . . .  DATA3  0H                A  
_RDPHF0. . . . . .  DATA3  1H                A  
_RDPHF1. . . . . .  DATA3  0H                A  
_RDPHF2. . . . . .  DATA3  0H                A  
_RDPHF3. . . . . .  DATA3  0H                A  
_RDPHF4. . . . . .  DATA3  0H                A  
_RDPHF5. . . . . .  DATA3  0H                A  
_RDPHF6. . . . . .  DATA3  0H                A  
_RDPHF7. . . . . .  DATA3  0H                A  
_RDYDIS. . . . . .  DATA3  1H                A  
_RDYEN0. . . . . .  DATA3  0H                A  
_RDYEN1. . . . . .  DATA3  0H                A  
_RDYEN2. . . . . .  DATA3  0H                A  
_RDYEN3. . . . . .  DATA3  0H                A  
_RDYEN4. . . . . .  DATA3  0H                A  
_RDYEN5. . . . . .  DATA3  0H                A  
_RDYEN6. . . . . .  DATA3  0H                A  
_RDYEN7. . . . . .  DATA3  1H                A  
_RDYMOD0 . . . . .  DATA3  0H                A  
_RDYMOD1 . . . . .  DATA3  0H                A  
_RDYMOD2 . . . . .  DATA3  0H                A  
_RDYMOD3 . . . . .  DATA3  0H                A  
_RDYMOD4 . . . . .  DATA3  0H                A  
_RDYMOD5 . . . . .  DATA3  0H                A  
_RDYMOD6 . . . . .  DATA3  0H                A  
_RDYMOD7 . . . . .  DATA3  1H                A  
_RDYPOL. . . . . .  DATA3  0H                A  
_RETST . . . . . .  DATA3  1H                A  
_ROCOFF. . . . . .  DATA3  0H                A  
_ROCON . . . . . .  DATA3  0H                A  
_RODIS . . . . . .  DATA3  0H                A  
_RORMV . . . . . .  DATA3  0H                A  
_RSTLEN. . . . . .  DATA3  0H                A  
_SAPEN . . . . . .  DATA3  4H                A  
_SGTDIS. . . . . .  DATA3  0H                A  
_SIZE1 . . . . . .  DATA32 40000H            A  
_SIZE2 . . . . . .  DATA16 1000H             A  
_SIZE3 . . . . . .  DATA16 1000H             A  
_SIZE4 . . . . . .  DATA16 1000H             A  
_SIZE5 . . . . . .  DATA16 1000H             A  
_SIZE6 . . . . . .  DATA16 1000H             A  
_SIZE7 . . . . . .  DATA16 1000H             A  
_SL. . . . . . . .  DATA3  1H                A  
_SLAVE . . . . . .  DATA3  0H                A  
_SLEEPCON. . . . .  DATA3  0H                A  
_STEN. . . . . . .  DATA3  0H                A  
_SYSC3 . . . . . .  DATA16 8540H             A  
A166 MACRO ASSEMBLER  START_V2                                                            09/03/2014 10:38:08 PAGE    38

_TCS0. . . . . . .  DATA16 6BAFH             A  
_TCS7. . . . . . .  DATA3  0H                A  
_TOS . . . . . . .  BYTE   200H              R  SEC=?C_SYSSTACK
_VECSC . . . . . .  DATA3  0H                A  
_WDTCTL. . . . . .  DATA3  0H                A  
_WDTIN . . . . . .  DATA3  0H                A  
_WDTREL. . . . . .  DATA3  0H                A  
_WRCFG . . . . . .  DATA3  0H                A  
_WRPDIS. . . . . .  DATA3  0H                A  
_WRPHF0. . . . . .  DATA3  3H                A  
_WRPHF1. . . . . .  DATA3  0H                A  
_WRPHF2. . . . . .  DATA3  0H                A  
_WRPHF3. . . . . .  DATA3  0H                A  
_WRPHF4. . . . . .  DATA3  0H                A  
_WRPHF5. . . . . .  DATA3  0H                A  
_WRPHF6. . . . . .  DATA3  0H                A  
_WRPHF7. . . . . .  DATA3  0H                A  
_WSFLASH . . . . .  DATA3  1H                A  
_WSRAM . . . . . .  DATA3  0H                A  
_ZCJ . . . . . . .  DATA3  1H                A  
main . . . . . . .  NEAR   ----                 EXT 



ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
