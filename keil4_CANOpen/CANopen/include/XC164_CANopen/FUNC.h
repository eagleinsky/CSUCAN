/*
 ********************************************************************************************************************
 *描述：    独立的CAN 控制器SJA1000应用函数定义头文件
 *文件名:   SJA1000FUNC.H
 *应用语言: KEIL C51
 *版本 :    V1.01
 *广州周立功单片机发展有限公司 保留所有的版权
 ********************************************************************************************************************
 */
#ifndef		_SJA1000FUNC_H
#define		_SJA1000FUNC_H

 #ifndef	_GLOBAL_SJA1000FUNC_
 #define	 GLOBAL_SJA1000FUNC		extern
 #else
 #define	 GLOBAL_SJA1000FUNC
 #endif

 
/*
 ********************************************************************************************************************
 * 定义sja1000的公用函数（basicCAN  | PeliCAN)模式
 ********************************************************************************************************************
 */ 

/*
************************************************************************************************************************
**函数原型:     char   SJATestInterface(unsigned char  testvalue)
**参数说明:     Value  测试值
**返回值:
**              SJA_OK            ; 表示SJA1000接口正常
**              SJA_INTERFACE_ERR ; 表示SJA1000与处理器接口出错
**
**说明:         该函数用于检测CAN控制器的接口是否正常
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	 char    SJATestInterface(unsigned char  testvalue);

/*
************************************************************************************************************************
**函数原型:  char   SJAEntryResetMode(void)
**参数说明:  无
**返回值:
**           SJA_OK             ; 表示SJA1000进入复位模式成功
**           SJA_ENTRYRESET_ERR ; 表示SJA1000进入复位模式失败
**
**说明:     该函数用于使sja1000进入复位模式
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char   SJAEntryResetMode(void);

/*
************************************************************************************************************************
**函数原型:  char   SJAQuitResetMode(void)
**参数说明:  无
**返回值:
**           SJA_OK             ; 表示SJA1000退出复位模式成功
**           SJA_QUITRESET_ERR  ; 表示SJA1000退出复位模式失败
**
**说明:     该函数用于使sja1000退出复位模式，进入工作模式
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char   SJAQuitResetMode(void);

/*
************************************************************************************************************************
**函数原型:  char  SetBitMask(unsigned char RegAdr,unsigned char BitValue)
**参数说明:  RegAdr     要设置位的寄存器地址
**           BitValue   要设置的值
**返回值:
**           SJA_OK       ; 表示设置值 成功
**           SJA_INIT_ERR ; 表示设置值 失败
**
**说明:     该函数用于置位sja1000某寄存器的某位
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char  SetBitMask(unsigned char RegAdr,unsigned char BitValue);

/*
************************************************************************************************************************
**函数原型:  char  ClearBitMask(unsigned char RegAdr,unsigned char BitValue)
**参数说明:  RegAdr     要清除位的寄存器地址
**           BitValue   要清除的值
**返回值:
**           SJA_OK       ; 表示位清除 成功
**           SJA_INIT_ERR ; 表示位清除 失败
**
**说明:     该函数用于清除sja1000某寄存器的某位
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char  ClearBitMask(unsigned char RegAdr,unsigned char BitValue);

/*
************************************************************************************************************************
**函数原型:  char   SJATestRstMode(void)
**参数说明:  无
**返回值:
**           0   ; 表示SJA1000处于复位模式
**           1   ; 表示SJA1000处于工作模式
**
**说明:     该函数用于测试SJA1000 处于复位模式还是工作模式
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char   SJATestRstMode(void);

/*
************************************************************************************************************************
**函数原型:  char	SJASetBandRateStandard(unsigned char	BandRateSize)
**参数说明:  BandRateSize		  标准常用波特率(Kbps)          
**				0					5
**				1					10
**				2					20
**				3					40
**				4					50
**				5					80
**				6					100
**				7					125
**				8					200
**				9					250
**				10					400
**				11					500
**				12					666
**				13					800
**				14					1000		  
**返回值:		
**           0					  ; 设置总线定时器成功
**			 SJA_SETBTR_ERR		  ; 设置总线定时器错
**			 SJA_NOBTRSIZE		  ;波特率不能设为此值
**
**说明:     该函数用于设定在系统晶体为16MHZ时，常用的标准波特率的值。
**			参数BandRateSize只能为0~14，其它的值会返回SJA_NOBTRSIZE错误
**			本函数只能用于复位模式
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASetBandRateStandard(unsigned char	BandRateSize);

/*
************************************************************************************************************************
**函数原型:  char	SJASystemPrgCMD(unsigned char cmd)
**参数说明:  cmd	SJA1000 的PeliCAN 工作方式命令字
**返回值:		
**           0				  ; 表示命令执行成功
**			 SJA_IMPCMD_ERR	  ; 表示命令执行出错
**			 SJA_NOTHISCMD    ; 没有此命令
**
**说明:     该函数用于执行sja1000的命令
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASystemPrgCMD(unsigned char cmd);

/*
************************************************************************************************************************
**函数原型:  char		SJASetClockDivision(unsigned	char  clockdiv)
**参数说明:  clockdiv	时钟分频寄存器的设定值
**返回值:		
**           0				    ; 设置时钟分频寄存器成功
**			 SJA_SETCDR_ERR		; 设置时钟分频寄存器错
**			 SJA_NOTRSTMODE     ; sja1000不在复位模式
**
**说明:     该函数用于设定sja1000的时钟分频寄存器
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char		SJASetClockDivision(unsigned	char  clockdiv);
/*
************************************************************************************************************************
**函数原型:  char		SJASetOutControl(unsigned char	OutCtrl)
**参数说明:  OutCtrl	输出控制寄存器的设定值
**返回值:		
**           0				    ; 设置输出控制寄存器成功
**			 SJA_SETOCR_ERR		; 设置输出控制寄存器错
**			 SJA_NOTRSTMODE     ; sja1000不在复位模式
**
**说明:     该函数用于设定sja1000的输出控制
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char		SJASetOutControl(unsigned char	OutCtrl);



/*
************************************************************************************************************************
**函数原型:  char	SJAWriteDataToTxBuf(unsigned	char	*databuf,unsigned	char	len)
**										
**参数说明:  databuf	写数据缓冲区首地址
**			 len		写长度
**返回值:		
**           0				  ; 表示将数据成功的写到到sja1000的发送缓冲区
**			 SJA_TXBUFLOCK	  ; sja1000发送缓冲区锁定
**			 
**           SJA_WTXBUF_ERR   ; 表示写数据失败
**
**说明:     该函数用于将要发送到总线的特定帧格式的数据写入sja1000的发送缓冲区
************************************************************************************************************************

GLOBAL_SJA1000FUNC	char	SJAWriteDataToTxBuf(unsigned	char	*databuf,unsigned	char	len);


/*
************************************************************************************************************************
**函数原型:  char	SJAReadDataFromRxBuf((unsigned char *databuf,unsigned	char	len)
**参数说明:  databuf	存放从sja1000读取数据的缓冲区首地址	
**			 len		读取长度 
**返回值:		
**           0				  ; 表示将读取数据成功
**			 SJA_RXBUFEMPTY	  ; sja1000接收缓冲区为空
**           SJA_RRXVUF_ERR   ; sja1000接收数据错
**
**说明:     该函数用于从sja1000读取数据
************************************************************************************************************************

GLOBAL_SJA1000FUNC	char	SJAReadDataFromRxBuf(unsigned char *databuf,unsigned	char	len);
*/
/*
************************************************************************************************************************
**函数原型:  char	SJASendData(unsigned	char			*databuf,
**									unsigned	char	cmd
**									)
**参数说明:  databuf	存放要发送到总线的特定帧格式的数据的缓冲区首地址
**			 info		sj1000帧格式类型的结构变量 	
**返回值:		
**           0				  ; 表示将数据成功的发送到can总线
**			 SJA_TXBUFLOCK	  ; sja1000发送缓冲区锁定
**           SJA_WTXBUF_ERR   ; 表示写发送缓冲区失败
**			 SJA_IMPCMD_ERR	  ; 表示命令执行出错
**
**说明：	本函数用于向can总线发送数据
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASendData(unsigned	char  port,
									unsigned	char	*databuf,
									unsigned	char	cmd
								 );
/*
************************************************************************************************************************
**函数原型:  char	SJARcvData(unsigned	char			*databuf,
**				  )
**参数说明:  databuf	存放要接收数据缓冲区首地址
**			 
**返回值:		
**           0				  ; 表示将读取数据成功
**			 SJA_RXBUFEMPTY	  ; sja1000接收缓冲区为空
**           SJA_RRXVUF_ERR   ; sja1000接收数据错
**
**说明：	本函数用于接收can总线数据
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJARcvData(unsigned	char  port,unsigned	char			*databuf
							 		  );



/*
 ********************************************************************************************************************
 *                        判断定义BasicCAN模式还是PeliCAN模式
 ********************************************************************************************************************
 */
#ifdef		_SJA_PELICAN_MODE_
/*
 ********************************************************************************************************************
 *                          PeliCAN 模式函数定义
 ********************************************************************************************************************
 */
 /*$page*/

/*
************************************************************************************************************************
**函数原型:  char   SJAEntryPeliCANMode(void)
**参数说明:  无
**返回值:
**           SJA_OK         ; 表示SJA1000进入PeliCAN模式 成功
**           SJA_INIT_ERR   ; 表示SJA1000进入PeliCAN模式 失败
**
**说明:     该函数用于使sja1000进入PeliCAN模式
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char   SJAEntryPeliCANMode(void);

/*
************************************************************************************************************************
**函数原型:  char	SJASetAccCode(unsigned char	acr0,unsigned char acr1,
**							  unsigned char	acr2,unsigned char acr3  	
**							  )
**参数说明:  acr0	代码验收寄存器0的设定值
**			 acr1	代码验收寄存器1的设定值
**			 acr2	代码验收寄存器2的设定值
**			 acr3	代码验收寄存器3的设定值
**返回值:		
**           0				      ; 设置代码验收寄存器成功
**			 SJA_SETACR_ERR	  ; 设置代码验收寄存器错
**			 SJA_NOTRSTMODE       ; sja1000不在复位模式
**
**说明:     该函数用于设定报文滤波的代码验收滤波器
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASetAccCode(	unsigned char	acr0,unsigned char acr1,
				  							unsigned char	acr2,unsigned char acr3  	
				  						  );

/*
************************************************************************************************************************
**函数原型:  char	SJASetAccMask(unsigned char	amr0,unsigned char amr1,
**							      unsigned char	amr2,unsigned char amr3  	
**							      )
**参数说明:  amr0	验收屏蔽寄存器0的设定值
**			 amr1	验收屏蔽寄存器1的设定值
**			 amr2	验收屏蔽寄存器2的设定值
**			 amr3	验收屏蔽寄存器3的设定值
**返回值:		
**           0					  ; 设置验收屏蔽寄存器成功
**			 SJA_SETAMR_ERR	  ; 设置验收屏蔽寄存器错
**			 SJA_NOTRSTMODE		  ; sja1000不在复位模式
**
**说明:     该函数用于设定报文滤波的验收屏蔽寄存器
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASetAccMask(	unsigned char	amr0,unsigned char amr1,
 				      						unsigned char	amr2,unsigned char amr3  	
				      					 );

/*
************************************************************************************************************************
**函数原型:     unsigned	char	ReadALCReg(void)
**参数说明:     无
**返回值:		错误仲裁寄存器(alc)的内容
**             
**说明:         该函数用于读取错误仲裁寄存器(alc)的内容
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	 unsigned	char	ReadALCReg(void);

/*
************************************************************************************************************************
**函数原型:     unsigned	char	ReadECCReg(void)
**参数说明:     无
**返回值:		错误捕捉寄存器(ecc)的内容
**             
**说明:         该函数用于读取错误捕捉寄存器(ecc)的内容
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	 unsigned	char	ReadECCReg(void);

/*
************************************************************************************************************************
**函数原型:     void	SJA1000_Config(SJAConfigStruct ChipConfig)
**参数说明:     typedef struct {
																	unsigned char ChipNum;     //芯片号
																	unsigned char BaudRate;    //波特率
																	unsigned char ExtendedFrame;   //0,标准帧；1，扩展帧
																	unsigned long ACR;         //验收校验ID  (真实值，右对齐)
																	unsigned long AMR;				 //验收屏蔽寄存器，为1时任何id都能通过(真实值，右对齐)
															 } SJAConfigStruct;
**返回值:		
**
**说明:         SJA1000配置信息
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC   void	SJA1000_Config(SJAConfigStruct ChipConfig);

/*
 ********************************************************************************************************************
 *                          PeliCAN 模式函数定义结束
 ********************************************************************************************************************
 */
#endif



#ifdef		_SJA_BASICCAN_MODE_
/*
 ********************************************************************************************************************
 *                          BasicCAN 模式函数定义
 ********************************************************************************************************************
 */
 /*$page*/
/*
************************************************************************************************************************
**函数原型:  char	SJASetAccCode(unsigned char	acr)
**参数说明:  acr	代码验收寄存器0的设定值
**返回值:		
**           0				      ; 设置代码验收寄存器成功
**			 SJA_SETACR_ERR	  ; 设置代码验收寄存器错
**			 SJA_NOTRSTMODE       ; sja1000不在复位模式
**
**说明:     该函数用于设定报文滤波的代码验收滤波器
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASetAccCode(	unsigned char	acr);

/*
************************************************************************************************************************
**函数原型:  char	SJASetAccMask(unsigned char	amr)
**参数说明:  amr	验收屏蔽寄存器0的设定值
**返回值:		
**           0					  ; 设置验收屏蔽寄存器成功
**			 SJA_SETAMR_ERR	  ; 设置验收屏蔽寄存器错
**			 SJA_NOTRSTMODE		  ; sja1000不在复位模式
**
**说明:     该函数用于设定报文滤波的验收屏蔽寄存器
************************************************************************************************************************
*/
GLOBAL_SJA1000FUNC	char	SJASetAccMask(	unsigned char	amr);




/*
 ********************************************************************************************************************
 *                          BasicCAN 模式寄存器定义结束
 ********************************************************************************************************************
 */
#endif



/* */
//unsigned char canSend(CAN_PORT notused, Message *m); //通过协议栈发送CAN消息



/*
 ********************************************************************************************************************
 *                        SJA1000FUNC定义结束
 ********************************************************************************************************************
 */
#endif
